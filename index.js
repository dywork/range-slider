!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=12)}([function(e,t,n){"use strict";t.__esModule=!0,t.extend=l,t.indexOf=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},t.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}if(!a.test(e))return e;return e.replace(o,i)},t.isEmpty=function(e){return!e&&0!==e||!(!c(e)||0!==e.length)},t.createFrame=function(e){var t=l({},e);return t._parent=e,t},t.blockParams=function(e,t){return e.path=t,e},t.appendContextPath=function(e,t){return(e?e+".":"")+t};var r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},o=/[&<>"'`=]/g,a=/[&<>"'`=]/;function i(e){return r[e]}function l(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}var u=Object.prototype.toString;t.toString=u;var s=function(e){return"function"==typeof e};s(/x/)&&(t.isFunction=s=function(e){return"function"==typeof e&&"[object Function]"===u.call(e)}),t.isFunction=s;var c=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===u.call(e)};t.isArray=c},function(e,t,n){"use strict";t.__esModule=!0;var r=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function o(e,t){var n=t&&t.loc,a=void 0,i=void 0,l=void 0,u=void 0;n&&(a=n.start.line,i=n.end.line,l=n.start.column,u=n.end.column,e+=" - "+a+":"+l);for(var s=Error.prototype.constructor.call(this,e),c=0;c<r.length;c++)this[r[c]]=s[r[c]];Error.captureStackTrace&&Error.captureStackTrace(this,o);try{n&&(this.lineNumber=a,this.endLineNumber=i,Object.defineProperty?(Object.defineProperty(this,"column",{value:l,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:u,enumerable:!0})):(this.column=l,this.endColumn=u))}catch(e){}}o.prototype=new Error,t.default=o,e.exports=t.default},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(3)),a=function(){var e=this;this.subscribe=function(t,n){o.default(e.subscribers,t)?e.subscribers[t].push(n):e.subscribers[t]=[n]},this.notify=function(t,n){e.subscribers[t]&&e.subscribers[t].forEach((function(e){return e(n)}))},this.subscribers={}};t.default=a},function(e,t,n){"use strict";var r=n(14);e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={overflowFix:"range-slider-overflow",slider:"range-slider",sliderVertical:"range-slider_vertical",wrap:"range-slider__wrap",bar:"range-slider__bar",scale:"range-slider__scale",toggle:"range-slider__toggle",toggleActive:"range-slider__toggle_active",handle:"range-slider__handle",thumb:"range-slider__thumb",ruler:"range-slider__ruler",rulerItem:"range-slider__ruler-item"}},function(e,t,n){e.exports=n(21).default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={currentValues:{min:10},range:{min:10,max:30},withThumb:!0,withRuler:!1,step:1,orientation:"horizontal"}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.HandlebarsEnvironment=c;var o=n(0),a=r(n(1)),i=n(8),l=n(29),u=r(n(10)),s=n(11);t.VERSION="4.7.6";t.COMPILER_REVISION=8;t.LAST_COMPATIBLE_COMPILER_REVISION=7;t.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};function c(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},i.registerDefaultHelpers(this),l.registerDefaultDecorators(this)}c.prototype={constructor:c,logger:u.default,log:u.default.log,registerHelper:function(e,t){if("[object Object]"===o.toString.call(e)){if(t)throw new a.default("Arg not supported with multiple helpers");o.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if("[object Object]"===o.toString.call(e))o.extend(this.partials,e);else{if(void 0===t)throw new a.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if("[object Object]"===o.toString.call(e)){if(t)throw new a.default("Arg not supported with multiple decorators");o.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses:function(){s.resetLoggedProperties()}};var d=u.default.log;t.log=d,t.createFrame=o.createFrame,t.logger=u.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.registerDefaultHelpers=function(e){o.default(e),a.default(e),i.default(e),l.default(e),u.default(e),s.default(e),c.default(e)},t.moveHelperToHooks=function(e,t,n){e.helpers[t]&&(e.hooks[t]=e.helpers[t],n||delete e.helpers[t])};var o=r(n(22)),a=r(n(23)),i=r(n(24)),l=r(n(25)),u=r(n(26)),s=r(n(27)),c=r(n(28))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),o={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=r.indexOf(o.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=o.lookupLevel(e),"undefined"!=typeof console&&o.lookupLevel(o.level)<=e){var t=o.methodMap[e];console[t]||(t="log");for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];console[t].apply(console,r)}}};t.default=o,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.createProtoAccessControl=function(e){var t=Object.create(null);t.constructor=!1,t.__defineGetter__=!1,t.__defineSetter__=!1,t.__lookupGetter__=!1;var n=Object.create(null);return n.__proto__=!1,{properties:{whitelist:r.createNewLookupObject(n,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:r.createNewLookupObject(t,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}},t.resultIsAllowed=function(e,t,n){return i("function"==typeof e?t.methods:t.properties,n)},t.resetLoggedProperties=function(){Object.keys(a).forEach((function(e){delete a[e]}))};var r=n(31),o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(10)),a=Object.create(null);function i(e,t){return void 0!==e.whitelist[t]?!0===e.whitelist[t]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==a[e]&&(a[e]=!0,o.log("error",'Handlebars: Access has been denied to resolve the property "'+e+'" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(t),!1)}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(13)),i=o(n(6)),l=o(n(42));n(46),n(50),function(e){var t=jQuery;t.fn.rangeSlider=function(e){var n=e;n=t.extend(r({domParent:this[0]},i.default),n);var o=new a.default(n);return o.init(),o},t.fn.configPanel=function(e){var t=new l.default(this[0],e);return t.init(),t}}()},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=a(n(2)),l=a(n(16)),u=function(e){function t(t){var n=e.call(this)||this;return n.init=function(){n.presenter.init(),n.presenter.subscribe("modelOptionsUpdate",n.alertSubs)},n.updateOptions=function(e){n.presenter.updateOptions(e)},n.getModelOptions=function(){return n.presenter.getModelOptions()},n.getDomParent=function(){return n.presenter.getDomParent()},n.getRulerValues=function(){return n.presenter.getRulerValues()},n.alertSubs=function(){n.notify("modelOptionsUpdate",n.getModelOptions())},n.presenter=new l.default(t),n}return o(t,e),t}(i.default);t.default=u},function(e,t,n){"use strict";var r=n(15);e.exports=Function.prototype.bind||r},function(e,t,n){"use strict";var r="Function.prototype.bind called on incompatible ",o=Array.prototype.slice,a=Object.prototype.toString;e.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==a.call(t))throw new TypeError(r+t);for(var n,i=o.call(arguments,1),l=function(){if(this instanceof n){var r=t.apply(this,i.concat(o.call(arguments)));return Object(r)===r?r:this}return t.apply(e,i.concat(o.call(arguments)))},u=Math.max(0,t.length-i.length),s=[],c=0;c<u;c++)s.push("$"+c);if(n=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")(l),t.prototype){var d=function(){};d.prototype=t.prototype,n.prototype=new d,d.prototype=null}return n}},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=a(n(3)),l=a(n(17)),u=a(n(18)),s=function(e){function t(t){var n=e.call(this)||this;return n.init=function(){n.subscribeModules(),n.view.render()},n.updateOptions=function(e){n.checkOnChangeRange(e),n.checkOnChangeOrientation(e),n.model.updateOptions(n.getSplitModelOptions(e))},n.getModelOptions=function(){return n.model.getOptions()},n.getDomParent=function(){return n.domParent},n.getRulerValues=function(){return n.view.getRulerValues()},n.getSplitModelOptions=function(e){return{currentValues:e.currentValues,range:e.range,withRuler:e.withRuler,withThumb:e.withThumb,step:e.step,orientation:e.orientation}},n.subscribeModules=function(){n.model.subscribe("modelOptionsUpdate",n.onModelOptionsUpdate),n.view.subscribe("modelOptionsUpdate",n.onViewChangedModelOptions)},n.onModelOptionsUpdate=function(e){n.view.updateModelOptions(e),n.notify("modelOptionsUpdate",n.model.getOptions())},n.onViewChangedModelOptions=function(e){n.model.updateOptions(e),n.notify("modelOptionsUpdate",n.model.getOptions())},n.checkOnChangeRange=function(e){var t=n.model.getOptions().currentValues,r=e.currentValues,o=i.default(t,"max"),a=i.default(r,"max");(!o&&a||o&&!a)&&(n.view.destroyDom(),n.view=new u.default(e,n.domParent),n.view.subscribe("modelOptionsUpdate",n.onViewChangedModelOptions),n.view.render())},n.checkOnChangeOrientation=function(e){n.model.getOptions().orientation!==e.orientation&&(n.view.destroyDom(),n.view=new u.default(e,n.domParent),n.view.subscribe("modelOptionsUpdate",n.onViewChangedModelOptions),n.view.render())},n.domParent=t.domParent,n.model=new l.default(n.getSplitModelOptions(t)),n.view=new u.default(n.model.getOptions(),t.domParent),n}return o(t,e),t}(a(n(2)).default);t.default=s},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=i(n(3)),u=i(n(6)),s=function(e){function t(t){var n=e.call(this)||this;return n.getOptions=function(){return n.modelOptions},n.updateOptions=function(e){n.modelOptions=n.getConfirmedOptions(e),n.notify("modelOptionsUpdate",n.modelOptions)},n.getConfirmedOptions=function(e){var t=a({},e),n=t.currentValues,r=t.range,o=t.step,i=Number.isNaN(n.min)||Number.isNaN(n.max),s=Number.isNaN(r.min)||Number.isNaN(r.max),c=Number.isNaN(o),d=l.default(n,"max");return s&&(t.range.min=u.default.range.min,t.range.max=u.default.range.max),i&&(t.currentValues.min=u.default.currentValues.min,d&&(t.currentValues.max=r.max)),(c||o<=0)&&(t.step=u.default.step),r.min>r.max&&(t.range.min=r.max),n.min<r.min&&(t.currentValues.min=r.min),n.max>r.max&&(t.currentValues.max=r.max),n.min>r.max&&(t.currentValues.min=r.max),n.max<r.min&&(t.currentValues.max=r.min),n.max<n.min&&(n.min=r.min,n.max=r.max),t},n.modelOptions=n.getConfirmedOptions(t),n}return o(t,e),t}(i(n(2)).default);t.default=s},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=i(n(3)),u=i(n(19)),s=i(n(36)),c=i(n(38)),d=i(n(40)),p=i(n(4)),f=function(e){function t(t,n){var r=e.call(this)||this;r.render=function(){r.mountSlider(),r.saveDom(),r.setListeners()},r.destroyDom=function(){r.domParent.removeChild(r.slider)},r.updateModelOptions=function(e){r.modelOptions=e,r.redrawValue()},r.getRulerValues=function(){return r.ruler.getRulerValues()},r.initViewComponents=function(){var e=r.modelOptions.withRuler;r.ruler=e?r.getRuler():null,r.scale=r.getScale(),r.toggles=r.getToggles()},r.getRuler=function(){var e=new u.default(r.getRulerProps());return e.subscribe("onRulerHide",r.onRulerHide),e},r.getRulerProps=function(){var e=r.modelOptions,t=e.range,n=e.step,o=e.withRuler;return n?{range:t,step:n,withRuler:o,isVertical:r.isVertical}:{range:t,step:1,withRuler:o,isVertical:r.isVertical}},r.onRulerHide=function(){r.ruler&&(r.ruler.destroyDom(),r.ruler=null)},r.getScale=function(){return new s.default(r.getScaleProps())},r.getScaleProps=function(){var e=r.modelOptions;return{currentValues:e.currentValues,range:e.range,isVertical:r.isVertical}},r.getToggles=function(){var e=r.modelOptions,t=e.currentValues,n=e.withThumb;return Object.entries(t).map((function(e){var t=e[1],o={scalePosition:r.scale.getPosition(t),isVertical:r.isVertical},a={main:new d.default(o),thumb:n?new c.default(r.getThumbProps(t)):null};return a.thumb&&a.thumb.subscribe("onThumbHide",r.onThumbHide),a}))},r.getThumbProps=function(e){return{withThumb:r.modelOptions.withThumb,value:e}},r.onThumbHide=function(){r.toggles.forEach((function(e){e.thumb&&(e.thumb.destroyDom(),e.thumb=null)}))},r.mountSlider=function(){r.domParent.appendChild(r.createSliderContainer())},r.createSliderContainer=function(){var e=document.createElement("div");e.classList.add(p.default.slider);var t=document.createElement("div");return t.classList.add(p.default.wrap),r.isVertical&&t.classList.add(p.default.sliderVertical),t.appendChild(r.scale.getHtml()),r.ruler&&t.appendChild(r.ruler.getHtml()),r.toggles.forEach((function(e){var n=e.main.getHtml();e.thumb&&n.appendChild(e.thumb.getHtml()),t.appendChild(n)})),e.appendChild(t),e},r.saveDom=function(){r.slider=r.domParent.querySelector("."+p.default.slider),r.saveScaleDom(),r.saveTogglesDom(),r.ruler&&r.saveRuler(),r.modelOptions.withThumb&&r.saveThumbDom()},r.saveScaleDom=function(){return r.scale.setDomNode(r.getScaleDom())},r.getScaleDom=function(){var e=r.domParent.querySelector("."+p.default.bar);return{scale:r.domParent.querySelector("."+p.default.scale),bar:e}},r.saveTogglesDom=function(){r.domParent.querySelectorAll("."+p.default.toggle).forEach((function(e,t){var n={toggle:e,handle:e.querySelector("."+p.default.handle)};r.toggles[t].main.setDomNode(n)}))},r.saveRuler=function(){var e=r.domParent.querySelector("."+p.default.ruler);r.ruler.setDomNode({ruler:e})},r.saveThumbDom=function(){r.domParent.querySelectorAll("."+p.default.thumb).forEach((function(e,t){r.toggles[t].thumb.setDomNode({thumb:e})}))},r.setListeners=function(){r.ruler&&r.ruler.getDomNode().ruler.addEventListener("click",r.onRulerClick);r.toggles.forEach((function(e,t){e.main.getDomNode().handle.addEventListener("mousedown",(function(e){r.onToggleMouseDown(e,t)}))}))},r.onRulerClick=function(e){var t=e.target;if(t.classList.contains(""+p.default.rulerItem)){var n=+t.textContent,o=a({},r.modelOptions),i=o.currentValues;if(r.isRange){var l=i.min,u=i.max,s=void 0;n<l&&(s=0),n>l&&n<u&&(s=Math.round(n/(l+u))),n>u&&(s=1),s>0?i.max=n:i.min=n}else i.min=n;r.dispatchModelOptions(o)}},r.onToggleMouseDown=function(e,t){e.preventDefault(),r.activeToggle=r.toggles[t].main,r.activeToggleIndex=t,r.toggles.forEach((function(e,t){var n=e.main.getDomNode().toggle;t===r.activeToggleIndex?n.classList.add(p.default.toggleActive):n.classList.remove(p.default.toggleActive)})),document.addEventListener("mousemove",r.onToggleMove),document.addEventListener("mouseup",r.onToggleUp)},r.onToggleMove=function(e){e.preventDefault(),r.changeCurrentValue({x:e.pageX,y:e.pageY})},r.onToggleUp=function(e){e.preventDefault(),document.removeEventListener("mousemove",r.onToggleMove),document.removeEventListener("mouseup",r.onToggleUp)},r.changeCurrentValue=function(e){var t=r.getCleanCoordinate(e),n=r.getPercent(t),o=r.getCurrentValueByPercent(n),i=a({},r.modelOptions),l={0:"min",1:"max"}[r.activeToggleIndex];if(r.isRange){var u=0===r.activeToggleIndex,s=1===r.activeToggleIndex,c=u?i.currentValues.max:i.currentValues.min,d=s?i.currentValues.min:i.currentValues.max;if(u){var p=o>=d;i.currentValues[l]=p?d:o}else if(s){p=o<=c;i.currentValues[l]=p?c:o}}else i.currentValues[l]=o;r.dispatchModelOptions(i)},r.getCleanCoordinate=function(e){var t=r.activeToggle.getDomNode().toggle.offsetWidth/4,n=r.isVertical?5:7,o=(r.isVertical?r.slider.offsetTop:r.slider.offsetLeft)-t+n;return r.isVertical?e.y-o:e.x-o},r.getPercent=function(e){var t=e/(r.isVertical?r.slider.offsetHeight:r.slider.offsetWidth);return t>1&&(t=1),t<0&&(t=0),t},r.getCurrentValueByPercent=function(e){var t=r.modelOptions,n=t.range,o=t.step,a=e*(n.max-n.min)+n.min;return Number(o?r.getStepCurrentValue(a).toLocaleString("en",{useGrouping:!1}):a.toLocaleString("en",{useGrouping:!1}))},r.getStepCurrentValue=function(e){var t=r.modelOptions,n=t.step,o=t.range,a=Math.round((e-o.min)/n)*n+o.min;return e-o.max==0&&(a=o.max),a>=o.max&&(a=o.max),a},r.dispatchModelOptions=function(e){r.notify("modelOptionsUpdate",e)},r.redrawValue=function(){r.scale.updateProps(r.getScaleProps()),r.modelOptions.withRuler?r.ruler?r.hasRulerPropsChange()&&r.ruler.updateProps(r.getRulerProps()):r.onRulerMount():r.ruler&&r.hasRulerPropsChange()&&r.ruler.updateProps(r.getRulerProps());var e=r.modelOptions,t=e.currentValues,n=e.withThumb;Object.entries(t).forEach((function(e){var t=e[0],o=e[1],a={min:0,max:1}[t],i={scalePosition:r.scale.getPosition(o),isVertical:r.isVertical};r.toggles[a].main.updateProps(i);var l=r.toggles[a].thumb;n?l?l.updateProps(r.getThumbProps(o)):r.onThumbMount():l&&l.updateProps(r.getThumbProps(o))}))},r.hasRulerPropsChange=function(){var e=r.ruler.getProps(),t=r.getRulerProps();return JSON.stringify(e)!==JSON.stringify(t)},r.onRulerMount=function(){r.ruler=new u.default(r.getRulerProps()),r.ruler.subscribe("onRulerHide",r.onRulerHide);var e=r.ruler.getHtml();r.slider.querySelector("."+p.default.wrap).appendChild(e),r.ruler.setDomNode({ruler:e}),r.ruler.getDomNode().ruler.addEventListener("click",r.onRulerClick)},r.onThumbMount=function(){var e=r.modelOptions.currentValues;Object.entries(e).forEach((function(e){var t=e[0],n=e[1],o={min:0,max:1}[t],a=r.toggles[o];a.thumb=new c.default(r.getThumbProps(n)),a.thumb.subscribe("onThumbHide",r.onThumbHide);var i=a.main.getDomNode().toggle;i.appendChild(a.thumb.getHtml());var l=i.querySelector("."+p.default.thumb);a.thumb.setDomNode({thumb:l})}))},r.modelOptions=t,r.domParent=n;var o=r.modelOptions,i=o.currentValues,f=o.orientation;return r.isVertical="vertical"===f,r.isRange=l.default(i,"max"),r.initViewComponents(),r}return o(t,e),t}(i(n(2)).default);t.default=f},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var a=arguments[t],i=0,l=a.length;i<l;i++,o++)r[o]=a[i];return r},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=i(n(4)),u=i(n(2)),s=n(20),c=function(e){function t(t){var n=e.call(this)||this;return n.getProps=function(){return n.props},n.getHtml=function(){var e={sliderClassNames:l.default,items:n.getRulerItems()},t=document.createElement("div");return t.innerHTML=s(e),t.firstChild},n.getDomNode=function(){return n.domNode},n.setDomNode=function(e){n.domNode=e},n.updateProps=function(e){n.props=e,n.props.withRuler?n.redraw():n.notify("onRulerHide","")},n.destroyDom=function(){var e=n.domNode.ruler;e.parentElement.removeChild(e)},n.getRulerValues=function(){for(var e=n.props,t=e.range,r=e.step,o=Math.ceil((t.max-t.min)/r),i=Math.ceil(o/5)*r,l=[],u=t.min,s=0;u<t.max;s+=1)(u+=i)<t.max&&l.push(Number(u.toLocaleString("en",{useGrouping:!1})));return a([t.min],l,[t.max])},n.redraw=function(){n.domNode.ruler.textContent="",Array.from(n.getHtml().childNodes).forEach((function(e){n.domNode.ruler.appendChild(e)}))},n.getRulerItems=function(){return n.getRulerValues().map((function(e){return{value:e,style:n.getTransformStyleByValue(e),class:l.default.rulerItem}}))},n.getTransformStyleByValue=function(e){var t=n.props.isVertical,r=n.getPositionByValue(e);return t?"transform: translate(0px, "+r+"%);":"transform: translate("+r+"%, 0px);"},n.props=t,n}return o(t,e),t.prototype.getPositionByValue=function(e){var t=this.props.range;return(+e-t.min)/(t.max-t.min)*1e3},t}(u.default);t.default=c},function(e,t,n){var r=n(5);e.exports=(r.default||r).template({1:function(e,t,n,r,o){var a=e.lambda,i=e.escapeExpression,l=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'    <li style="'+i(a(null!=t?l(t,"style"):t,t))+'" class='+i(a(null!=t?l(t,"class"):t,t))+">"+i(a(null!=t?l(t,"value"):t,t))+"</li>\n"},compiler:[8,">= 4.3.0"],main:function(e,t,n,r,o){var a,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<ul class="+e.escapeExpression(e.lambda(null!=(a=null!=t?i(t,"sliderClassNames"):t)?i(a,"ruler"):a,t))+">\n"+(null!=(a=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"items"):t,{name:"each",hash:{},fn:e.program(1,o,0),inverse:e.noop,data:o,loc:{start:{line:2,column:2},end:{line:4,column:11}}}))?a:"")+"</ul>"},useData:!0})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}t.__esModule=!0;var a=o(n(7)),i=r(n(32)),l=r(n(1)),u=o(n(0)),s=o(n(33)),c=r(n(35));function d(){var e=new a.HandlebarsEnvironment;return u.extend(e,a),e.SafeString=i.default,e.Exception=l.default,e.Utils=u,e.escapeExpression=u.escapeExpression,e.VM=s,e.template=function(t){return s.template(t,e)},e}var p=d();p.create=d,c.default(p),p.default=p,t.default=p,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0);t.default=function(e){e.registerHelper("blockHelperMissing",(function(t,n){var o=n.inverse,a=n.fn;if(!0===t)return a(this);if(!1===t||null==t)return o(this);if(r.isArray(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):o(this);if(n.data&&n.ids){var i=r.createFrame(n.data);i.contextPath=r.appendContextPath(n.data.contextPath,n.name),n={data:i}}return a(t,n)}))},e.exports=t.default},function(e,t,n){"use strict";(function(r){t.__esModule=!0;var o,a=n(0),i=n(1),l=(o=i)&&o.__esModule?o:{default:o};t.default=function(e){e.registerHelper("each",(function(e,t){if(!t)throw new l.default("Must pass iterator to #each");var n,o=t.fn,i=t.inverse,u=0,s="",c=void 0,d=void 0;function p(t,n,r){c&&(c.key=t,c.index=n,c.first=0===n,c.last=!!r,d&&(c.contextPath=d+t)),s+=o(e[t],{data:c,blockParams:a.blockParams([e[t],t],[d+t,null])})}if(t.data&&t.ids&&(d=a.appendContextPath(t.data.contextPath,t.ids[0])+"."),a.isFunction(e)&&(e=e.call(this)),t.data&&(c=a.createFrame(t.data)),e&&"object"==typeof e)if(a.isArray(e))for(var f=e.length;u<f;u++)u in e&&p(u,u,u===e.length-1);else if(r.Symbol&&e[r.Symbol.iterator]){for(var m=[],h=e[r.Symbol.iterator](),g=h.next();!g.done;g=h.next())m.push(g.value);for(f=(e=m).length;u<f;u++)p(u,u,u===e.length-1)}else n=void 0,Object.keys(e).forEach((function(e){void 0!==n&&p(n,u-1),n=e,u++})),void 0!==n&&p(n,u-1,!0);return 0===u&&(s=i(this)),s}))},e.exports=t.default}).call(this,n(9))},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(1),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new a.default('Missing helper: "'+arguments[arguments.length-1].name+'"')}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(0),a=n(1),i=(r=a)&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("if",(function(e,t){if(2!=arguments.length)throw new i.default("#if requires exactly one argument");return o.isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||o.isEmpty(e)?t.inverse(this):t.fn(this)})),e.registerHelper("unless",(function(t,n){if(2!=arguments.length)throw new i.default("#unless requires exactly one argument");return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("log",(function(){for(var t=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)t.push(arguments[r]);var o=1;null!=n.hash.level?o=n.hash.level:n.data&&null!=n.data.level&&(o=n.data.level),t[0]=o,e.log.apply(e,t)}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("lookup",(function(e,t,n){return e?n.lookupProperty(e,t):e}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(0),a=n(1),i=(r=a)&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("with",(function(e,t){if(2!=arguments.length)throw new i.default("#with requires exactly one argument");o.isFunction(e)&&(e=e.call(this));var n=t.fn;if(o.isEmpty(e))return t.inverse(this);var r=t.data;return t.data&&t.ids&&((r=o.createFrame(t.data)).contextPath=o.appendContextPath(t.data.contextPath,t.ids[0])),n(e,{data:r,blockParams:o.blockParams([e],[r&&r.contextPath])})}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.registerDefaultDecorators=function(e){a.default(e)};var r,o=n(30),a=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0);t.default=function(e){e.registerDecorator("inline",(function(e,t,n,o){var a=e;return t.partials||(t.partials={},a=function(o,a){var i=n.partials;n.partials=r.extend({},i,t.partials);var l=e(o,a);return n.partials=i,l}),t.partials[o.args[0]]=o.fn,a}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.createNewLookupObject=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.extend.apply(void 0,[Object.create(null)].concat(t))};var r=n(0)},function(e,t,n){"use strict";function r(e){this.string=e}t.__esModule=!0,r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},t.default=r,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.checkRevision=function(e){var t=e&&e[0]||1,n=l.COMPILER_REVISION;if(t>=l.LAST_COMPATIBLE_COMPILER_REVISION&&t<=l.COMPILER_REVISION)return;if(t<l.LAST_COMPATIBLE_COMPILER_REVISION){var r=l.REVISION_CHANGES[n],o=l.REVISION_CHANGES[t];throw new i.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+o+").")}throw new i.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")},t.template=function(e,t){if(!t)throw new i.default("No environment passed to template");if(!e||!e.main)throw new i.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var n=e.compiler&&7===e.compiler[0];var r={strict:function(e,t,n){if(!e||!(t in e))throw new i.default('"'+t+'" not defined in '+e,{loc:n});return e[t]},lookupProperty:function(e,t){var n=e[t];return null==n||Object.prototype.hasOwnProperty.call(e,t)||c.resultIsAllowed(n,r.protoAccessControl,t)?n:void 0},lookup:function(e,t){for(var n=e.length,o=0;o<n;o++){if(null!=(e[o]&&r.lookupProperty(e[o],t)))return e[o][t]}},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:o.escapeExpression,invokePartial:function(n,r,a){a.hash&&(r=o.extend({},r,a.hash),a.ids&&(a.ids[0]=!0)),n=t.VM.resolvePartial.call(this,n,r,a);var l=o.extend({},a,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),u=t.VM.invokePartial.call(this,n,r,l);if(null==u&&t.compile&&(a.partials[a.name]=t.compile(n,e.compilerOptions,t),u=a.partials[a.name](r,l)),null!=u){if(a.indent){for(var s=u.split("\n"),c=0,d=s.length;c<d&&(s[c]||c+1!==d);c++)s[c]=a.indent+s[c];u=s.join("\n")}return u}throw new i.default("The partial "+a.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var n=e[t];return n.decorator=e[t+"_d"],n},programs:[],program:function(e,t,n,r,o){var a=this.programs[e],i=this.fn(e);return t||o||r||n?a=d(this,e,i,t,n,r,o):a||(a=this.programs[e]=d(this,e,i)),a},data:function(e,t){for(;e&&t--;)e=e._parent;return e},mergeIfNeeded:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=o.extend({},t,e)),n},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function a(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=n.data;a._setup(n),!n.partial&&e.useData&&(o=f(t,o));var i=void 0,l=e.useBlockParams?[]:void 0;function u(t){return""+e.main(r,t,r.helpers,r.partials,o,l,i)}return e.useDepths&&(i=n.depths?t!=n.depths[0]?[t].concat(n.depths):n.depths:[t]),(u=m(e.main,u,r,n.depths||[],o,l))(t,n)}return a.isTop=!0,a._setup=function(a){if(a.partial)r.protoAccessControl=a.protoAccessControl,r.helpers=a.helpers,r.partials=a.partials,r.decorators=a.decorators,r.hooks=a.hooks;else{var i=o.extend({},t.helpers,a.helpers);!function(e,t){Object.keys(e).forEach((function(n){var r=e[n];e[n]=function(e,t){var n=t.lookupProperty;return s.wrapHelper(e,(function(e){return o.extend({lookupProperty:n},e)}))}(r,t)}))}(i,r),r.helpers=i,e.usePartial&&(r.partials=r.mergeIfNeeded(a.partials,t.partials)),(e.usePartial||e.useDecorators)&&(r.decorators=o.extend({},t.decorators,a.decorators)),r.hooks={},r.protoAccessControl=c.createProtoAccessControl(a);var l=a.allowCallsToHelperMissing||n;u.moveHelperToHooks(r,"helperMissing",l),u.moveHelperToHooks(r,"blockHelperMissing",l)}},a._child=function(t,n,o,a){if(e.useBlockParams&&!o)throw new i.default("must pass block params");if(e.useDepths&&!a)throw new i.default("must pass parent depths");return d(r,t,e[t],n,0,o,a)},a},t.wrapProgram=d,t.resolvePartial=function(e,t,n){e?e.call||n.name||(n.name=e,e=n.partials[e]):e="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name];return e},t.invokePartial=function(e,t,n){var r=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var a=void 0;n.fn&&n.fn!==p&&function(){n.data=l.createFrame(n.data);var e=n.fn;a=n.data["partial-block"]=function(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=l.createFrame(n.data),n.data["partial-block"]=r,e(t,n)},e.partials&&(n.partials=o.extend({},n.partials,e.partials))}();void 0===e&&a&&(e=a);if(void 0===e)throw new i.default("The partial "+n.name+" could not be found");if(e instanceof Function)return e(t,n)},t.noop=p;var r,o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0)),a=n(1),i=(r=a)&&r.__esModule?r:{default:r},l=n(7),u=n(8),s=n(34),c=n(11);function d(e,t,n,r,o,a,i){function l(t){var o=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],l=i;return!i||t==i[0]||t===e.nullContext&&null===i[0]||(l=[t].concat(i)),n(e,t,e.helpers,e.partials,o.data||r,a&&[o.blockParams].concat(a),l)}return(l=m(n,l,e,i,r,a)).program=t,l.depth=i?i.length:0,l.blockParams=o||0,l}function p(){return""}function f(e,t){return t&&"root"in t||((t=t?l.createFrame(t):{}).root=e),t}function m(e,t,n,r,a,i){if(e.decorator){var l={};t=e.decorator(t,l,n,r&&r[0],a,i,r),o.extend(t,l)}return t}},function(e,t,n){"use strict";t.__esModule=!0,t.wrapHelper=function(e,t){if("function"!=typeof e)return e;return function(){var n=arguments[arguments.length-1];return arguments[arguments.length-1]=t(n),e.apply(this,arguments)}}},function(e,t,n){"use strict";(function(n){t.__esModule=!0,t.default=function(e){var t=void 0!==n?n:window,r=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=r),e}},e.exports=t.default}).call(this,n(9))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(3)),a=r(n(4)),i=n(37),l=function(e){var t=this;this.getHtml=function(){var e={sliderClassNames:a.default},n=document.createElement("div");return n.innerHTML=i(e),n.querySelector("."+a.default.scale).setAttribute("style",t.getTransformStyle()),n.firstChild},this.getPosition=function(e){var n=t.props.range;return(+e-n.min)/(n.max-n.min)},this.getDomNode=function(){return t.domNode},this.setDomNode=function(e){t.domNode=e},this.updateProps=function(e){t.props=e,t.redraw()},this.redraw=function(){t.domNode.scale.setAttribute("style",t.getTransformStyle())},this.getTransformStyle=function(){var e=t.props,n=e.currentValues,r=e.isVertical;if(o.default(n,"max")){var a=Object.entries(n).map((function(e){var n=e[1];return t.getPosition(n)})),i=100*a[0],l=a[1]-.01*i;return r?"transform: translate(0px, "+i+"%) scale(1, "+l+");":"transform: translate("+i+"%, 0px) scale("+l+", 1);"}var u=t.getPosition(n.min);return r?"transform: scale(1, "+u+");":"transform: scale("+u+", 1);"},this.props=e};t.default=l},function(e,t,n){var r=n(5);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,o){var a,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<div class="+l(i(null!=(a=null!=t?u(t,"sliderClassNames"):t)?u(a,"bar"):a,t))+">\n  <div class="+l(i(null!=(a=null!=t?u(t,"sliderClassNames"):t)?u(a,"scale"):a,t))+"></div>\n</div>"},useData:!0})},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=a(n(4)),l=a(n(2)),u=n(39),s=function(e){function t(t){var n=e.call(this)||this;return n.getHtml=function(){var e=n.props.value,t={sliderClassNames:i.default,value:e},r=document.createElement("div");return r.innerHTML=u(t),r.firstChild},n.getDomNode=function(){return n.domNode},n.setDomNode=function(e){n.domNode=e},n.destroyDom=function(){var e=n.domNode.thumb;e.parentElement.removeChild(e)},n.updateProps=function(e){n.props=e,n.redraw()},n.redraw=function(){var e=n.props,t=e.value;e.withThumb?n.domNode.thumb.textContent=""+t:n.notify("onThumbHide","")},n.props=t,n}return o(t,e),t}(l.default);t.default=s},function(e,t,n){var r=n(5);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,o){var a,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<div class="+l(i(null!=(a=null!=t?u(t,"sliderClassNames"):t)?u(a,"thumb"):a,t))+">"+l(i(null!=t?u(t,"value"):t,t))+"</div>"},useData:!0})},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(4)),a=n(41),i=function(e){var t=this;this.getHtml=function(){var e={sliderClassNames:o.default},n=document.createElement("div");return n.innerHTML=a(e),n.querySelector("."+o.default.toggle).setAttribute("style",t.getTransformStyle()),n.firstChild},this.getDomNode=function(){return t.domNode},this.setDomNode=function(e){t.domNode=e},this.updateProps=function(e){t.props=e,t.redraw()},this.redraw=function(){t.domNode.toggle.setAttribute("style",t.getTransformStyle())},this.getTransformStyle=function(){var e=t.props.isVertical,n=t.getPosition();return e?"transform: translate(0px, "+n+"%);":"transform: translate("+n+"%, 0px);"},this.getPosition=function(){return 1e3*t.props.scalePosition},this.props=e};t.default=i},function(e,t,n){var r=n(5);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,o){var a,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<div class="+l(i(null!=(a=null!=t?u(t,"sliderClassNames"):t)?u(a,"toggle"):a,t))+">\n  <input class="+l(i(null!=(a=null!=t?u(t,"sliderClassNames"):t)?u(a,"handle"):a,t))+' type="text">\n</div>'},useData:!0})},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(3)),i=o(n(43)),l=o(n(44)),u=n(45),s=function(e,t){var n=this;this.init=function(){n.renderPanel(),n.slider.subscribe("modelOptionsUpdate",n.onOptionsUpdate)},this.renderPanel=function(){n.mountPanel(),n.saveDom(),n.toggleHangingInputs(),n.setListeners()},this.mountPanel=function(){n.domParent.appendChild(n.getPanelContainer())},this.getPanelContainer=function(){var e=document.createElement("div"),t=r({},i.default),o=n.slider.getModelOptions(),a=o.currentValues,l=o.range,s=o.withRuler,c=o.withThumb,d=o.step,p=o.orientation,f={classNames:t,currentValues:a,range:l,withRuler:s,withThumb:c,step:d,isRange:n.hasRange(),isVertical:"vertical"===p};return e.innerHTML=u(f),e},this.toggleHangingInputs=function(){var e=n.domElements.maxCurrentValueContainer,t=i.default.hidedValueContainer;n.hasRange()?e.classList.remove(t):e.classList.add(t)},this.saveDom=function(){var e=i.default.valuesContainer,t=i.default.stepInput,r=i.default.minRangeInput,o=i.default.maxRangeInput,a=i.default.thumbCheckbox,l=i.default.rulerCheckbox,u=i.default.diapasonCheckbox,s=i.default.verticalCheckbox,c=i.default.currentValueContainer,d=i.default.currentValueInput,p=i.default.maxCurrentValueContainer,f=i.default.maxCurrentValueInput,m=n.domParent.querySelector("."+e),h=n.domParent.querySelector("."+c),g=n.domParent.querySelector("."+d),v=n.domParent.querySelector("."+t),b=n.domParent.querySelector("."+r),_=n.domParent.querySelector("."+o),x=n.domParent.querySelector("."+a),y=n.domParent.querySelector("."+l),w=n.domParent.querySelector("."+u),O=n.domParent.querySelector("."+s),P=n.domParent.querySelector("."+p),C=n.domParent.querySelector("."+f);n.domElements={valuesContainer:m,currentValueContainer:h,currentValueInput:g,maxCurrentValueContainer:P,maxCurrentValueInput:C,stepInput:v,minRangeInput:b,maxRangeInput:_,thumbCheckbox:x,rulerCheckbox:y,diapasonCheckbox:w,verticalCheckbox:O}},this.setListeners=function(){var e=n.domElements,t=e.currentValueInput,r=e.stepInput,o=e.maxCurrentValueInput,a=e.minRangeInput,i=e.maxRangeInput,l=e.thumbCheckbox,u=e.rulerCheckbox,s=e.diapasonCheckbox,c=e.verticalCheckbox;t.addEventListener("input",n.debounceInput),r.addEventListener("input",n.debounceInput),a.addEventListener("input",n.debounceInput),i.addEventListener("input",n.debounceInput),l.addEventListener("change",n.onCheckboxChange),u.addEventListener("change",n.onCheckboxChange),s.addEventListener("change",n.onDiapasonChange),c.addEventListener("change",n.onVerticalChange),n.hasRange()&&o.addEventListener("input",n.debounceInput)},this.debounceInput=l.default((function(){var e=n.getNewModelOptions();n.slider.updateOptions(e)})),this.getNewModelOptions=function(){var e=n.domElements,t=e.minRangeInput,o=e.maxRangeInput,a=e.currentValueInput,i=e.maxCurrentValueInput,l=e.stepInput,u=r({},n.slider.getModelOptions());u.step=+l.value;var s={min:+t.value,max:+o.value};u.range=s;var c={min:+a.value};return n.hasRange()&&(c.max=+i.value),u.currentValues=c,u},this.onCheckboxChange=function(e){var t=e.target,o=t.getAttribute("data-value-name"),a=r({},n.slider.getModelOptions());a[o]=t.checked,n.slider.updateOptions(a)},this.onVerticalChange=function(e){var t=r({},n.slider.getModelOptions()),o=e.target.checked;t.orientation=o?"vertical":"horizontal",n.toggleOrientation(),n.slider.updateOptions(t)},this.onDiapasonChange=function(e){var t=r({},n.slider.getModelOptions()),o=r({},n.slider.getModelOptions().currentValues);if(e.target.checked){var a=t.range;o.max=a.max}else delete o.max;t.currentValues=o,n.slider.updateOptions(t)},this.toggleOrientation=function(){var e=n.slider.getDomParent(),t=e.querySelector(".range-slider__wrap");e.classList.toggle("config-panel__slider_vertical"),t.classList.toggle("config-panel__slider_vertical")},this.onOptionsUpdate=function(){var e=n.domElements,t=e.minRangeInput,r=e.maxRangeInput,o=e.currentValueInput,a=e.maxCurrentValueInput,i=e.stepInput,l=e.rulerCheckbox,u=e.thumbCheckbox,s=n.slider.getModelOptions(),c=s.currentValues,d=s.step,p=s.range,f=s.withRuler,m=s.withThumb;i.value=""+d,t.value=""+p.min,r.value=""+p.max,l.checked=f,u.checked=m,n.hasRange()?(o.value=""+c.min,a.value=""+c.max):o.value=""+c.min,n.toggleHangingInputs()},this.hasRange=function(){var e=n.slider.getModelOptions().currentValues;return a.default(e,"max")},this.slider=t,this.domParent=e};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={minCurrentValueContainer:"config-panel__value_current-min-value",maxCurrentValueContainer:"config-panel__value_current-max-value",minCurrentValueInput:"current-min-value",maxCurrentValueInput:"current-max-value",currentValueContainer:"config-panel__value_current-value",currentValueInput:"current-value",valuesContainer:"config-panel__values",valueContainer:"config-panel__value",valueLabel:"config-panel__label",stepInput:"step",minRangeInput:"min-range-value",maxRangeInput:"max-range-value",thumbCheckbox:"thumb-show",rulerCheckbox:"ruler-show",diapasonCheckbox:"diapason",verticalCheckbox:"vertical",hidedValueContainer:"config-panel__value--hided"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(e){var t;return function(n){clearTimeout(t),t=setTimeout(e,700,n)}}},function(e,t,n){var r=n(5);e.exports=(r.default||r).template({1:function(e,t,n,r,o){return"checked"},compiler:[8,">= 4.3.0"],main:function(e,t,n,r,o){var a,i,l=e.lambda,u=e.escapeExpression,s=null!=t?t:e.nullContext||{},c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<fieldset class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valuesContainer"):a,t))+'">\n  <p class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueContainer"):a,t))+" "+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"currentValueContainer"):a,t))+'">\n    <label class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueLabel"):a,t))+'">\n      Текущее значение:\n      <input class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"currentValueInput"):a,t))+'" type="number" value="'+u(l(null!=(a=null!=t?c(t,"currentValues"):t)?c(a,"min"):a,t))+'">\n    </label>\n  </p>\n  <p class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueContainer"):a,t))+" "+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"maxCurrentValueContainer"):a,t))+'">\n    <label class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueLabel"):a,t))+'">\n      Текущее макс. значение:\n      <input class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"maxCurrentValueInput"):a,t))+'" type="number" value="'+u(l(null!=(a=null!=t?c(t,"currentValues"):t)?c(a,"max"):a,t))+'">\n    </label>\n  </p>\n  <p class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueContainer"):a,t))+'">\n    <label class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueLabel"):a,t))+'">\n      Шаг:\n      <input class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"stepInput"):a,t))+'" type="number" value="'+u("function"==typeof(i=null!=(i=c(n,"step")||(null!=t?c(t,"step"):t))?i:e.hooks.helperMissing)?i.call(s,{name:"step",hash:{},data:o,loc:{start:{line:17,column:67},end:{line:17,column:75}}}):i)+'">\n    </label>\n  </p>\n  <p class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueContainer"):a,t))+'">\n    <label class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueLabel"):a,t))+'">\n      Мин. значение:\n      <input class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"minRangeInput"):a,t))+'" type="number" value='+u(l(null!=(a=null!=t?c(t,"range"):t)?c(a,"min"):a,t))+'>\n    </label>\n  </p>\n  <p class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueContainer"):a,t))+'">\n    <label class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueLabel"):a,t))+'">\n      Макс. значение:\n      <input class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"maxRangeInput"):a,t))+'" type="number" value="'+u(l(null!=(a=null!=t?c(t,"range"):t)?c(a,"max"):a,t))+'">\n    </label>\n  </p>\n</fieldset>\n<fieldset>\n  <p class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueContainer"):a,t))+'">\n    <label class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueLabel"):a,t))+'">\n      Показывать текущее значение:\n      <input class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"thumbCheckbox"):a,t))+'" data-value-name="withThumb" type="checkbox" '+(null!=(a=c(n,"if").call(s,null!=t?c(t,"withThumb"):t,{name:"if",hash:{},fn:e.program(1,o,0),inverse:e.noop,data:o,loc:{start:{line:37,column:94},end:{line:37,column:125}}}))?a:"")+'>\n    </label>\n  </p>\n  <p class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueContainer"):a,t))+'">\n    <label class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueLabel"):a,t))+'">\n      Шкала:\n      <input class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"rulerCheckbox"):a,t))+'" data-value-name="withRuler" type="checkbox" '+(null!=(a=c(n,"if").call(s,null!=t?c(t,"withRuler"):t,{name:"if",hash:{},fn:e.program(1,o,0),inverse:e.noop,data:o,loc:{start:{line:43,column:94},end:{line:43,column:125}}}))?a:"")+'>\n    </label>\n  </p>\n  <p class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueContainer"):a,t))+'">\n    <label class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueLabel"):a,t))+'">\n      Диапазон:\n      <input class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"diapasonCheckbox"):a,t))+'" type="checkbox" '+(null!=(a=c(n,"if").call(s,null!=t?c(t,"isRange"):t,{name:"if",hash:{},fn:e.program(1,o,0),inverse:e.noop,data:o,loc:{start:{line:49,column:69},end:{line:49,column:98}}}))?a:"")+'>\n    </label>\n  </p>\n  <p class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueContainer"):a,t))+'">\n    <label class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"valueLabel"):a,t))+'">\n      Вертикальный слайдер:\n      <input class="'+u(l(null!=(a=null!=t?c(t,"classNames"):t)?c(a,"verticalCheckbox"):a,t))+'" type="checkbox" '+(null!=(a=c(n,"if").call(s,null!=t?c(t,"isVertical"):t,{name:"if",hash:{},fn:e.program(1,o,0),inverse:e.noop,data:o,loc:{start:{line:55,column:69},end:{line:55,column:101}}}))?a:"")+">\n    </label>\n  </p>\n</fieldset>"},useData:!0})},function(e,t,n){var r=n(47),o=n(48);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],u=t.base?a[0]+t.base:a[0],s=n[u]||0,c="".concat(u," ").concat(s);n[u]=s+1;var d=l(c),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:c,updater:g(p,t),references:1}),r.push(c)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var c,d=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function f(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function g(e,t){var n,r,o;if(t.singleton){var a=h++;n=m||(m=s(t)),r=p.bind(null,n,a,!1),o=p.bind(null,n,a,!0)}else n=s(t),r=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);i[o].references--}for(var a=u(e,t),s=0;s<n.length;s++){var c=l(n[s]);0===i[c].references&&(i[c].updater(),i.splice(c,1))}n=a}}}},function(e,t,n){(t=n(49)(!1)).push([e.i,"html{font-family:Arial, sans-serif;font-size:14px;color:#eee6e6;background:#121212}.container{padding:10px 20px}.page-wrap{display:flex;flex-wrap:wrap;justify-content:space-between;margin:0 -1em}.range-slider-overflow{overflow:hidden}.range-slider,.range-slider__wrap{position:relative;width:100%;height:100%}.range-slider_vertical .range-slider__bar{width:4.1px;height:100%}.range-slider_vertical .range-slider__toggle{top:-5px;left:-5px;width:auto;height:10%}.range-slider_vertical .range-slider__ruler{height:100%;top:-400px;left:81px}.range-slider_vertical .range-slider__ruler li{top:-5px;left:-5px;width:auto;height:10%}.range-slider_vertical .range-slider__thumb{top:-4px;left:22px}.range-slider__bar{position:relative;height:4.1px;border:none;background-color:#6b6b6b}.range-slider__scale{position:absolute;top:0;left:0;z-index:1;width:100%;height:100%;background-color:#423388;transform-origin:0 0}.range-slider__ruler{position:relative;top:10px;padding:0;margin:0;list-style:none;color:#eee6e6}.range-slider__ruler li{position:absolute;top:-5px;left:-7px;z-index:4;width:10%;height:0;font-size:14px;cursor:pointer}.range-slider__toggle{position:absolute;top:-5px;left:-7px;z-index:4;width:10%;height:0}.range-slider__toggle_active{z-index:10}.range-slider__handle{box-sizing:border-box;position:absolute;z-index:1;display:block;width:14px;height:14px;font-size:0;background-color:#423388;border:none;border-radius:50%;cursor:pointer}.range-slider__thumb{position:absolute;top:-25px;left:-18px;z-index:0;min-width:41px;padding:2px 4px;color:#eee6e6;font-size:14px;text-align:center;background:#423388}.config-panel{width:400px;margin:1em 1em}.config-panel__slider{margin-bottom:50px}.config-panel__slider_vertical{height:400px}.config-panel__title{margin:0;margin-bottom:34px;font-size:24px;font-weight:normal}.config-panel__value--hided{display:none}.config-panel__label{cursor:pointer}.config-panel__label input[type='checkbox']{cursor:pointer}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(u," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}var i,l,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";n.r(t);n(51);$(document).ready((function(){const e=$(".js-default-slider").rangeSlider({currentValues:{min:15},step:1,range:{min:0,max:30},withRuler:!0,withThumb:!0}),t=$(".js-range-slider").rangeSlider({currentValues:{min:15,max:26},range:{min:10,max:30},withRuler:!0,withThumb:!0}),n=$(".js-step-slider").rangeSlider({currentValues:{min:10},range:{min:10,max:30},step:5,withRuler:!0,withThumb:!0}),r=$(".js-vertical-slider").rangeSlider({currentValues:{min:15},range:{min:10,max:30},withRuler:!0,withThumb:!0,orientation:"vertical"});$(".js-default-slider-config").configPanel(e),$(".js-range-slider-config").configPanel(t),$(".js-step-slider-config").configPanel(n),$(".js-vertical-slider-config").configPanel(r)}))},function(e,t,n){const r=n(52);r.keys().forEach(r)},function(e,t,n){var r={"./android-chrome-192x192.png":53,"./android-chrome-512x512.png":54,"./apple-touch-icon.png":55,"./browserconfig.xml":56,"./favicon-16x16.png":57,"./favicon-32x32.png":58,"./favicon.ico":59,"./mstile-144x144.png":60,"./mstile-150x150.png":61,"./mstile-310x150.png":62,"./mstile-310x310.png":63,"./mstile-70x70.png":64,"./site.webmanifest":65};function o(e){var t=a(e);return n(t)}function a(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=a,e.exports=o,o.id=52},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/android-chrome-192x192.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/android-chrome-512x512.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/apple-touch-icon.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/browserconfig.xml"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/favicon-16x16.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/favicon-32x32.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/favicon.ico"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/mstile-144x144.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/mstile-150x150.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/mstile-310x150.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/mstile-310x310.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/mstile-70x70.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/site.webmanifest"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,