!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){"use strict";t.__esModule=!0,t.extend=l,t.indexOf=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},t.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}if(!o.test(e))return e;return e.replace(a,i)},t.isEmpty=function(e){return!e&&0!==e||!(!c(e)||0!==e.length)},t.createFrame=function(e){var t=l({},e);return t._parent=e,t},t.blockParams=function(e,t){return e.path=t,e},t.appendContextPath=function(e,t){return(e?e+".":"")+t};var r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},a=/[&<>"'`=]/g,o=/[&<>"'`=]/;function i(e){return r[e]}function l(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}var u=Object.prototype.toString;t.toString=u;var s=function(e){return"function"==typeof e};s(/x/)&&(t.isFunction=s=function(e){return"function"==typeof e&&"[object Function]"===u.call(e)}),t.isFunction=s;var c=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===u.call(e)};t.isArray=c},function(e,t,n){"use strict";t.__esModule=!0;var r=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function a(e,t){var n=t&&t.loc,o=void 0,i=void 0,l=void 0,u=void 0;n&&(o=n.start.line,i=n.end.line,l=n.start.column,u=n.end.column,e+=" - "+o+":"+l);for(var s=Error.prototype.constructor.call(this,e),c=0;c<r.length;c++)this[r[c]]=s[r[c]];Error.captureStackTrace&&Error.captureStackTrace(this,a);try{n&&(this.lineNumber=o,this.endLineNumber=i,Object.defineProperty?(Object.defineProperty(this,"column",{value:l,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:u,enumerable:!0})):(this.column=l,this.endColumn=u))}catch(e){}}a.prototype=new Error,t.default=a,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13),a=function(){var e=this;this.subscribe=function(t,n){var a=new r.default(t);a.registerCallback(n),e.subscribers[t]=a},this.notify=function(t,n){e.subscribers[t]&&e.subscribers[t].callbacks.forEach((function(e){return e(n)}))},this.subscribers={}};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={overflowFix:"range-slider-overflow",slider:"range-slider",sliderVertical:"range-slider--vertical",wrap:"range-slider__wrap",bar:"range-slider__bar",scale:"range-slider__scale",toggle:"range-slider__toggle",toggleActive:"range-slider__toggle--active",handle:"range-slider__handle",thumb:"range-slider__thumb",ruler:"range-slider__ruler",rulerItem:"range-slider__ruler-item"}},function(e,t,n){e.exports=n(19).default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={currentValue:10,range:{min:10,max:30},isThumb:!0,isRuler:!1,step:1,decimal:2,orientation:"horizontal"}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.HandlebarsEnvironment=c;var a=n(0),o=r(n(1)),i=n(7),l=n(27),u=r(n(9)),s=n(10);t.VERSION="4.7.6";t.COMPILER_REVISION=8;t.LAST_COMPATIBLE_COMPILER_REVISION=7;t.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};function c(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},i.registerDefaultHelpers(this),l.registerDefaultDecorators(this)}c.prototype={constructor:c,logger:u.default,log:u.default.log,registerHelper:function(e,t){if("[object Object]"===a.toString.call(e)){if(t)throw new o.default("Arg not supported with multiple helpers");a.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if("[object Object]"===a.toString.call(e))a.extend(this.partials,e);else{if(void 0===t)throw new o.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if("[object Object]"===a.toString.call(e)){if(t)throw new o.default("Arg not supported with multiple decorators");a.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses:function(){s.resetLoggedProperties()}};var d=u.default.log;t.log=d,t.createFrame=a.createFrame,t.logger=u.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.registerDefaultHelpers=function(e){a.default(e),o.default(e),i.default(e),l.default(e),u.default(e),s.default(e),c.default(e)},t.moveHelperToHooks=function(e,t,n){e.helpers[t]&&(e.hooks[t]=e.helpers[t],n||delete e.helpers[t])};var a=r(n(20)),o=r(n(21)),i=r(n(22)),l=r(n(23)),u=r(n(24)),s=r(n(25)),c=r(n(26))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),a={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=r.indexOf(a.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=a.lookupLevel(e),"undefined"!=typeof console&&a.lookupLevel(a.level)<=e){var t=a.methodMap[e];console[t]||(t="log");for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];console[t].apply(console,r)}}};t.default=a,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.createProtoAccessControl=function(e){var t=Object.create(null);t.constructor=!1,t.__defineGetter__=!1,t.__defineSetter__=!1,t.__lookupGetter__=!1;var n=Object.create(null);return n.__proto__=!1,{properties:{whitelist:r.createNewLookupObject(n,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:r.createNewLookupObject(t,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}},t.resultIsAllowed=function(e,t,n){return i("function"==typeof e?t.methods:t.properties,n)},t.resetLoggedProperties=function(){Object.keys(o).forEach((function(e){delete o[e]}))};var r=n(29),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(9)),o=Object.create(null);function i(e,t){return void 0!==e.whitelist[t]?!0===e.whitelist[t]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==o[e]&&(o[e]=!0,a.log("error",'Handlebars: Access has been denied to resolve the property "'+e+'" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(t),!1)}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(12),o=n(40),i=n(5);n(42),n(46),function(e){var t=jQuery;t.fn.rangeSlider=function(e){var n=e;n=t.extend(r({domParent:this[0]},i.default),n);var o=new a.Slider(n);return o.init(),o},t.fn.configPanel=function(e){var t=new o.default(this[0],e);return t.init(),t}}()},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),i=n(14),l=function(e){function t(t){var n=e.call(this)||this;return n.init=function(){n.presenter.init(),n.presenter.subscribe("sliderOptionsUpdate",n.alertSubs)},n.onChangeSliderOptions=function(e){n.sliderOptions=e,n.presenter.dispatchSliderOptions(n.sliderOptions)},n.getSliderOptions=function(){return n.sliderOptions},n.alertSubs=function(e){n.sliderOptions=e,n.notify("sliderOptionsUpdate",n.getSliderOptions())},n.sliderOptions=t,n.presenter=new i.default(t),n}return a(t,e),t}(o.default);t.Slider=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){var t=this;this.registerCallback=function(e){t.callbacks.push(e)},this.name=e,this.callbacks=[]};t.default=r},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(15),i=n(16),l=function(e){function t(t){var n=e.call(this)||this;return n.dispatchSliderOptions=function(e){var t=n.model.getOptions().currentValue,r=e.currentValue,a=t instanceof Array,o=r instanceof Array;(!a&&o||a&&!o)&&(n.view.destroyDom(),n.view=new i.default(e),n.view.subscribe("sliderOptionsUpdate",n.dispatchSliderOptions),n.view.render()),n.model.getOptions().orientation!==e.orientation&&(n.view.destroyDom(),n.view=new i.default(e),n.view.subscribe("sliderOptionsUpdate",n.dispatchSliderOptions),n.view.render()),n.model.updateSliderOptions(e),n.notify("sliderOptionsUpdate",n.model.getOptions())},n.subscribeModules=function(){n.view.subscribe("sliderOptionsUpdate",n.dispatchSliderOptions),n.model.subscribe("sliderOptionsUpdate",n.onSliderOptionsUpdate)},n.onSliderOptionsUpdate=function(e){n.view.updateSliderOptions(e),n.notify("sliderOptionsUpdate",e)},n.model=new o.default(t),n.view=new i.default(n.model.getOptions()),n}return a(t,e),t.prototype.init=function(){this.subscribeModules(),this.view.render()},t}(n(2).default);t.default=l},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),l=n(5),u=function(e){function t(t){var n=e.call(this)||this;return n.getOptions=function(){return n.sliderOptions},n.updateSliderOptions=function(e){var t=n.getVerificateOptions(e);n.sliderOptions=t,n.notify("sliderOptionsUpdate",n.sliderOptions)},n.getVerificateOptions=function(e){var t=o({},e),n=t.currentValue,r=t.range,a=t.step;return r.min||(r.min=l.default.range.min),r.max||(r.max=l.default.range.max),a||(t.step=l.default.step),n||0===n||(t.currentValue=r.min),n instanceof Array?(n[0]||(n[0]=r.min),n[1]||(n[1]=r.max),n[0]=n[0]<r.min?r.min:n[0],n[1]=n[1]>r.max?r.max:n[1]):n<r.min?t.currentValue=r.min:n>r.max&&(t.currentValue=r.max),t},n.sliderOptions=n.getVerificateOptions(t),n}return a(t,e),t}(i.default);t.default=u},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),l=n(17),u=n(34),s=n(36),c=n(38),d=n(3),p=function(e){function t(t){var n=e.call(this)||this;return n.render=function(){n.mountSlider(),n.saveDom(),n.setListeners()},n.destroyDom=function(){n.domParent.removeChild(n.slider)},n.updateSliderOptions=function(e){n.sliderOptions=e,n.redrawValue()},n.redrawValue=function(){n.scale.updateProps(n.getScaleProps()),n.sliderOptions.isRuler?n.ruler?n.hasRulerPropsChange()&&n.ruler.updateProps(n.getRulerProps()):n.onRulerMount():n.ruler&&n.hasRulerPropsChange()&&n.ruler.updateProps(n.getRulerProps());var e=n.sliderOptions,t=e.currentValue,r=e.isThumb;if(t instanceof Array)t.forEach((function(e,t){var a={scalePosition:n.scale.getPosition(e),isVertical:n.isVertical};n.toggles[t].main.updateProps(a);var o=n.toggles[t].thumb;r?o?o.updateProps(n.getThumbProps(e)):n.onThumbMount():o&&o.updateProps(n.getThumbProps(e))}));else{var a={scalePosition:n.scale.getPosition(t),isVertical:n.isVertical};n.toggles[0].main.updateProps(a);var o=n.toggles[0].thumb;r?o?o.updateProps(n.getThumbProps(t)):n.onThumbMount():o&&o.updateProps(n.getThumbProps(t))}},n.hasRulerPropsChange=function(){var e=n.ruler.getProps(),t=n.getRulerProps();return JSON.stringify(e)!==JSON.stringify(t)},n.dispatchSliderOptions=function(e){n.notify("sliderOptionsUpdate",e)},n.getToggles=function(){var e=n.sliderOptions,t=e.currentValue,r=e.isThumb;if(t instanceof Array)return t.map((function(e){var t={scalePosition:n.scale.getPosition(e),isVertical:n.isVertical},a={main:new u.Toggle(t),thumb:r?new s.Thumb(n.getThumbProps(e)):null};return a.thumb&&a.thumb.subscribe("onThumbHide",n.onThumbHide),a}));var a={scalePosition:n.scale.getPosition(t),isVertical:n.isVertical},o={main:new u.Toggle(a),thumb:r?new s.Thumb(n.getThumbProps(t)):null};return o.thumb&&o.thumb.subscribe("onThumbHide",n.onThumbHide),[o]},n.getThumbProps=function(e){return{isThumb:n.sliderOptions.isThumb,value:e}},n.getScale=function(){return new l.Scale(n.getScaleProps())},n.getScaleProps=function(){var e=n.sliderOptions;return{currentValue:e.currentValue,range:e.range,isVertical:n.isVertical}},n.getRuler=function(){if(n.sliderOptions.isRuler){var e=new c.Ruler(n.getRulerProps());return e.subscribe("onRulerHide",n.onRulerHide),e}return null},n.getRulerProps=function(){var e=n.sliderOptions,t=e.range,r=e.step,a=e.isRuler;return r?{range:t,step:r,isRuler:a,isVertical:n.isVertical}:{range:t,step:1,isRuler:a,isVertical:n.isVertical}},n.mountSlider=function(){n.domParent.appendChild(n.createSliderContainer())},n.createSliderContainer=function(){var e=document.createElement("div");e.classList.add(d.default.slider);var t=document.createElement("div");return t.classList.add(d.default.wrap),n.isVertical&&t.classList.add(d.default.sliderVertical),t.appendChild(n.scale.getHtml()),n.ruler&&t.appendChild(n.ruler.getHtml()),n.toggles.forEach((function(e){var n=e.main.getHtml();e.thumb&&n.appendChild(e.thumb.getHtml()),t.appendChild(n)})),e.appendChild(t),e},n.saveDom=function(){n.slider=n.domParent.querySelector("."+d.default.slider),n.saveScaleDom(),n.saveTogglesDom(),n.ruler&&n.saveRuler(),n.sliderOptions.isThumb&&n.saveThumbDom()},n.saveScaleDom=function(){return n.scale.setDomNode(n.getScaleDom())},n.getScaleDom=function(){var e=n.domParent.querySelector("."+d.default.bar);return{scale:n.domParent.querySelector("."+d.default.scale),bar:e}},n.saveTogglesDom=function(){n.domParent.querySelectorAll("."+d.default.toggle).forEach((function(e,t){var r={toggle:e,handle:e.querySelector("."+d.default.handle)};n.toggles[t].main.setDomNode(r)}))},n.saveRuler=function(){var e=n.domParent.querySelector("."+d.default.ruler);n.ruler.setDomNode({ruler:e})},n.saveThumbDom=function(){n.domParent.querySelectorAll("."+d.default.thumb).forEach((function(e,t){n.toggles[t].thumb.setDomNode({thumb:e})}))},n.setListeners=function(){n.ruler&&n.ruler.getDomNode().ruler.addEventListener("click",n.onRulerClick);n.toggles.forEach((function(e,t){e.main.getDomNode().handle.addEventListener("mousedown",(function(e){n.onToggleMouseDown(e,t)}))}))},n.onRulerMount=function(){n.ruler=new c.Ruler(n.getRulerProps()),n.ruler.subscribe("onRulerHide",n.onRulerHide);var e=n.ruler.getHtml();n.slider.querySelector("."+d.default.wrap).appendChild(e),n.ruler.setDomNode({ruler:e}),n.ruler.getDomNode().ruler.addEventListener("click",n.onRulerClick)},n.onRulerHide=function(){n.ruler&&(n.ruler.destroyDom(),n.ruler=null)},n.onRulerClick=function(e){var t=e.target;if(t.classList.contains(""+d.default.rulerItem)){var r=+t.textContent,a=o({},n.sliderOptions);if(a.currentValue instanceof Array){var i=a.currentValue[0],l=a.currentValue[1],u=void 0;r<i&&(u=0),r>i&&r<l&&(u=Math.round(r/(i+l))),r>l&&(u=1),a.currentValue[u]=r}else a.currentValue=r;n.dispatchSliderOptions(a)}},n.onToggleMouseDown=function(e,t){e.preventDefault(),n.activeToggle=n.toggles[t].main,n.activeToggleIndex=t,n.toggles.forEach((function(e,t){var r=e.main.getDomNode().toggle;t===n.activeToggleIndex?r.classList.add(d.default.toggleActive):r.classList.remove(d.default.toggleActive)})),document.addEventListener("mousemove",n.onToggleMove),document.addEventListener("mouseup",n.onToggleUp)},n.onToggleMove=function(e){e.preventDefault(),n.changeCurrentValue({x:e.pageX,y:e.pageY})},n.onToggleUp=function(e){e.preventDefault(),document.removeEventListener("mousemove",n.onToggleMove),document.removeEventListener("mouseup",n.onToggleUp)},n.onThumbMount=function(){var e=n.sliderOptions.currentValue;if(e instanceof Array)e.forEach((function(e,t){var r=n.toggles[t];r.thumb=new s.Thumb(n.getThumbProps(e)),r.thumb.subscribe("onThumbHide",n.onThumbHide);var a=r.main.getDomNode().toggle;a.appendChild(r.thumb.getHtml());var o=a.querySelector("."+d.default.thumb);r.thumb.setDomNode({thumb:o})}));else{var t=n.toggles[0];t.thumb=new s.Thumb(n.getThumbProps(e)),t.thumb.subscribe("onThumbHide",n.onThumbHide);var r=t.main.getDomNode().toggle;r.appendChild(t.thumb.getHtml());var a=r.querySelector("."+d.default.thumb);t.thumb.setDomNode({thumb:a})}},n.onThumbHide=function(){n.toggles.forEach((function(e){e.thumb&&(e.thumb.destroyDom(),e.thumb=null)}))},n.changeCurrentValue=function(e){var t=n.getCleanCoord(e),r=n.getPercent(t),a=n.getCurrentValueByPercent(r),i=o({},n.sliderOptions);if(i.currentValue instanceof Array){var l=0===n.activeToggleIndex,u=n.activeToggleIndex===i.currentValue.length-1,s=l?i.currentValue[n.activeToggleIndex]:i.currentValue[n.activeToggleIndex-1],c=u?i.currentValue[n.activeToggleIndex]:i.currentValue[n.activeToggleIndex+1];if(l){var d=a>=c;i.currentValue[n.activeToggleIndex]=d?c:a}else if(u){d=a<=s;i.currentValue[n.activeToggleIndex]=d?s:a}}else i.currentValue=a;n.dispatchSliderOptions(i)},n.getCleanCoord=function(e){var t=n.activeToggle.getDomNode().toggle.offsetWidth/4,r=n.isVertical?5:7,a=(n.isVertical?n.slider.offsetTop:n.slider.offsetLeft)-t+r;return n.isVertical?e.y-a:e.x-a},n.getPercent=function(e){var t=e/(n.isVertical?n.slider.offsetHeight:n.slider.offsetWidth);return t>1&&(t=1),t<0&&(t=0),t},n.getCurrentValueByPercent=function(e){var t=n.sliderOptions,r=t.range,a=t.step,o=t.decimal,i=e*(r.max-r.min)+r.min;return a?n.getStepCurrentValue(i):+i.toFixed(o)},n.getStepCurrentValue=function(e){var t=n.sliderOptions,r=t.step,a=t.range,o=Math.round((e-a.min)/r)*r+a.min;return+e.toFixed()-a.max==0&&(o=a.max),o>=a.max&&(o=a.max),o},n.sliderOptions=t,n.domParent=n.sliderOptions.domParent,n.isVertical="vertical"===n.sliderOptions.orientation,n.scale=n.getScale(),n.ruler=n.getRuler(),n.toggles=n.getToggles(),n}return a(t,e),t}(i.default);t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),a=n(18),o=function(e){var t=this;this.getHtml=function(){var e={sliderClassName:r.default},n=document.createElement("div");return n.innerHTML=a(e),n.querySelector("."+r.default.scale).setAttribute("style",t.getTransformStyle()),n.firstChild},this.getPosition=function(e){var n=t.props.range;return(+e-n.min)/(n.max-n.min)},this.getDomNode=function(){return t.domNode},this.setDomNode=function(e){t.domNode=e},this.updateProps=function(e){t.props=e,t.redraw()},this.redraw=function(){t.domNode.scale.setAttribute("style",t.getTransformStyle())},this.getTransformStyle=function(){var e=t.props,n=e.currentValue,r=e.isVertical,a=[];if(n instanceof Array){var o=100*(a=n.map((function(e){return t.getPosition(e)})))[0],i=a[1]-.01*o;return r?"transform: translate(0px, "+o+"%) scale(1, "+i+");":"transform: translate("+o+"%, 0px) scale("+i+", 1);"}var l=t.getPosition(n);return r?"transform: scale(1, "+l+");":"transform: scale("+l+", 1);"},this.props=e};t.Scale=o},function(e,t,n){var r=n(4);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,a){var o,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<div class="+l(i(null!=(o=null!=t?u(t,"sliderClassName"):t)?u(o,"bar"):o,t))+">\r\n  <div class="+l(i(null!=(o=null!=t?u(t,"sliderClassName"):t)?u(o,"scale"):o,t))+"></div>\r\n</div>"},useData:!0})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}t.__esModule=!0;var o=a(n(6)),i=r(n(30)),l=r(n(1)),u=a(n(0)),s=a(n(31)),c=r(n(33));function d(){var e=new o.HandlebarsEnvironment;return u.extend(e,o),e.SafeString=i.default,e.Exception=l.default,e.Utils=u,e.escapeExpression=u.escapeExpression,e.VM=s,e.template=function(t){return s.template(t,e)},e}var p=d();p.create=d,c.default(p),p.default=p,t.default=p,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0);t.default=function(e){e.registerHelper("blockHelperMissing",(function(t,n){var a=n.inverse,o=n.fn;if(!0===t)return o(this);if(!1===t||null==t)return a(this);if(r.isArray(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):a(this);if(n.data&&n.ids){var i=r.createFrame(n.data);i.contextPath=r.appendContextPath(n.data.contextPath,n.name),n={data:i}}return o(t,n)}))},e.exports=t.default},function(e,t,n){"use strict";(function(r){t.__esModule=!0;var a,o=n(0),i=n(1),l=(a=i)&&a.__esModule?a:{default:a};t.default=function(e){e.registerHelper("each",(function(e,t){if(!t)throw new l.default("Must pass iterator to #each");var n,a=t.fn,i=t.inverse,u=0,s="",c=void 0,d=void 0;function p(t,n,r){c&&(c.key=t,c.index=n,c.first=0===n,c.last=!!r,d&&(c.contextPath=d+t)),s+=a(e[t],{data:c,blockParams:o.blockParams([e[t],t],[d+t,null])})}if(t.data&&t.ids&&(d=o.appendContextPath(t.data.contextPath,t.ids[0])+"."),o.isFunction(e)&&(e=e.call(this)),t.data&&(c=o.createFrame(t.data)),e&&"object"==typeof e)if(o.isArray(e))for(var f=e.length;u<f;u++)u in e&&p(u,u,u===e.length-1);else if(r.Symbol&&e[r.Symbol.iterator]){for(var m=[],h=e[r.Symbol.iterator](),g=h.next();!g.done;g=h.next())m.push(g.value);for(f=(e=m).length;u<f;u++)p(u,u,u===e.length-1)}else n=void 0,Object.keys(e).forEach((function(e){void 0!==n&&p(n,u-1),n=e,u++})),void 0!==n&&p(n,u-1,!0);return 0===u&&(s=i(this)),s}))},e.exports=t.default}).call(this,n(8))},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new o.default('Missing helper: "'+arguments[arguments.length-1].name+'"')}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(0),o=n(1),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("if",(function(e,t){if(2!=arguments.length)throw new i.default("#if requires exactly one argument");return a.isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||a.isEmpty(e)?t.inverse(this):t.fn(this)})),e.registerHelper("unless",(function(t,n){if(2!=arguments.length)throw new i.default("#unless requires exactly one argument");return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("log",(function(){for(var t=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)t.push(arguments[r]);var a=1;null!=n.hash.level?a=n.hash.level:n.data&&null!=n.data.level&&(a=n.data.level),t[0]=a,e.log.apply(e,t)}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("lookup",(function(e,t,n){return e?n.lookupProperty(e,t):e}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(0),o=n(1),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("with",(function(e,t){if(2!=arguments.length)throw new i.default("#with requires exactly one argument");a.isFunction(e)&&(e=e.call(this));var n=t.fn;if(a.isEmpty(e))return t.inverse(this);var r=t.data;return t.data&&t.ids&&((r=a.createFrame(t.data)).contextPath=a.appendContextPath(t.data.contextPath,t.ids[0])),n(e,{data:r,blockParams:a.blockParams([e],[r&&r.contextPath])})}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.registerDefaultDecorators=function(e){o.default(e)};var r,a=n(28),o=(r=a)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0);t.default=function(e){e.registerDecorator("inline",(function(e,t,n,a){var o=e;return t.partials||(t.partials={},o=function(a,o){var i=n.partials;n.partials=r.extend({},i,t.partials);var l=e(a,o);return n.partials=i,l}),t.partials[a.args[0]]=a.fn,o}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.createNewLookupObject=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.extend.apply(void 0,[Object.create(null)].concat(t))};var r=n(0)},function(e,t,n){"use strict";function r(e){this.string=e}t.__esModule=!0,r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},t.default=r,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.checkRevision=function(e){var t=e&&e[0]||1,n=l.COMPILER_REVISION;if(t>=l.LAST_COMPATIBLE_COMPILER_REVISION&&t<=l.COMPILER_REVISION)return;if(t<l.LAST_COMPATIBLE_COMPILER_REVISION){var r=l.REVISION_CHANGES[n],a=l.REVISION_CHANGES[t];throw new i.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+a+").")}throw new i.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")},t.template=function(e,t){if(!t)throw new i.default("No environment passed to template");if(!e||!e.main)throw new i.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var n=e.compiler&&7===e.compiler[0];var r={strict:function(e,t,n){if(!(e&&t in e))throw new i.default('"'+t+'" not defined in '+e,{loc:n});return e[t]},lookupProperty:function(e,t){var n=e[t];return null==n?n:Object.prototype.hasOwnProperty.call(e,t)?n:c.resultIsAllowed(n,r.protoAccessControl,t)?n:void 0},lookup:function(e,t){for(var n=e.length,a=0;a<n;a++){if(null!=(e[a]&&r.lookupProperty(e[a],t)))return e[a][t]}},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:a.escapeExpression,invokePartial:function(n,r,o){o.hash&&(r=a.extend({},r,o.hash),o.ids&&(o.ids[0]=!0)),n=t.VM.resolvePartial.call(this,n,r,o);var l=a.extend({},o,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),u=t.VM.invokePartial.call(this,n,r,l);if(null==u&&t.compile&&(o.partials[o.name]=t.compile(n,e.compilerOptions,t),u=o.partials[o.name](r,l)),null!=u){if(o.indent){for(var s=u.split("\n"),c=0,d=s.length;c<d&&(s[c]||c+1!==d);c++)s[c]=o.indent+s[c];u=s.join("\n")}return u}throw new i.default("The partial "+o.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var n=e[t];return n.decorator=e[t+"_d"],n},programs:[],program:function(e,t,n,r,a){var o=this.programs[e],i=this.fn(e);return t||a||r||n?o=d(this,e,i,t,n,r,a):o||(o=this.programs[e]=d(this,e,i)),o},data:function(e,t){for(;e&&t--;)e=e._parent;return e},mergeIfNeeded:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=a.extend({},t,e)),n},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function o(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=n.data;o._setup(n),!n.partial&&e.useData&&(a=f(t,a));var i=void 0,l=e.useBlockParams?[]:void 0;function u(t){return""+e.main(r,t,r.helpers,r.partials,a,l,i)}return e.useDepths&&(i=n.depths?t!=n.depths[0]?[t].concat(n.depths):n.depths:[t]),(u=m(e.main,u,r,n.depths||[],a,l))(t,n)}return o.isTop=!0,o._setup=function(o){if(o.partial)r.protoAccessControl=o.protoAccessControl,r.helpers=o.helpers,r.partials=o.partials,r.decorators=o.decorators,r.hooks=o.hooks;else{var i=a.extend({},t.helpers,o.helpers);!function(e,t){Object.keys(e).forEach((function(n){var r=e[n];e[n]=function(e,t){var n=t.lookupProperty;return s.wrapHelper(e,(function(e){return a.extend({lookupProperty:n},e)}))}(r,t)}))}(i,r),r.helpers=i,e.usePartial&&(r.partials=r.mergeIfNeeded(o.partials,t.partials)),(e.usePartial||e.useDecorators)&&(r.decorators=a.extend({},t.decorators,o.decorators)),r.hooks={},r.protoAccessControl=c.createProtoAccessControl(o);var l=o.allowCallsToHelperMissing||n;u.moveHelperToHooks(r,"helperMissing",l),u.moveHelperToHooks(r,"blockHelperMissing",l)}},o._child=function(t,n,a,o){if(e.useBlockParams&&!a)throw new i.default("must pass block params");if(e.useDepths&&!o)throw new i.default("must pass parent depths");return d(r,t,e[t],n,0,a,o)},o},t.wrapProgram=d,t.resolvePartial=function(e,t,n){e?e.call||n.name||(n.name=e,e=n.partials[e]):e="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name];return e},t.invokePartial=function(e,t,n){var r=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var o=void 0;n.fn&&n.fn!==p&&function(){n.data=l.createFrame(n.data);var e=n.fn;o=n.data["partial-block"]=function(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=l.createFrame(n.data),n.data["partial-block"]=r,e(t,n)},e.partials&&(n.partials=a.extend({},n.partials,e.partials))}();void 0===e&&o&&(e=o);if(void 0===e)throw new i.default("The partial "+n.name+" could not be found");if(e instanceof Function)return e(t,n)},t.noop=p;var r,a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0)),o=n(1),i=(r=o)&&r.__esModule?r:{default:r},l=n(6),u=n(7),s=n(32),c=n(10);function d(e,t,n,r,a,o,i){function l(t){var a=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],l=i;return!i||t==i[0]||t===e.nullContext&&null===i[0]||(l=[t].concat(i)),n(e,t,e.helpers,e.partials,a.data||r,o&&[a.blockParams].concat(o),l)}return(l=m(n,l,e,i,r,o)).program=t,l.depth=i?i.length:0,l.blockParams=a||0,l}function p(){return""}function f(e,t){return t&&"root"in t||((t=t?l.createFrame(t):{}).root=e),t}function m(e,t,n,r,o,i){if(e.decorator){var l={};t=e.decorator(t,l,n,r&&r[0],o,i,r),a.extend(t,l)}return t}},function(e,t,n){"use strict";t.__esModule=!0,t.wrapHelper=function(e,t){if("function"!=typeof e)return e;return function(){var n=arguments[arguments.length-1];return arguments[arguments.length-1]=t(n),e.apply(this,arguments)}}},function(e,t,n){"use strict";(function(n){t.__esModule=!0,t.default=function(e){var t=void 0!==n?n:window,r=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=r),e}},e.exports=t.default}).call(this,n(8))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),a=n(35),o=function(e){var t=this;this.getHtml=function(){var e={sliderClassName:r.default},n=document.createElement("div");return n.innerHTML=a(e),n.querySelector("."+r.default.toggle).setAttribute("style",t.getTransformStyle()),n.firstChild},this.getDomNode=function(){return t.domNode},this.setDomNode=function(e){t.domNode=e},this.updateProps=function(e){t.props=e,t.redraw()},this.redraw=function(){t.domNode.toggle.setAttribute("style",t.getTransformStyle())},this.getTransformStyle=function(){var e=t.props.isVertical,n=t.getPosition();return e?"transform: translate(0px, "+n+"%);":"transform: translate("+n+"%, 0px);"},this.getPosition=function(){return 1e3*t.props.scalePosition},this.props=e};t.Toggle=o},function(e,t,n){var r=n(4);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,a){var o,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<div class="+l(i(null!=(o=null!=t?u(t,"sliderClassName"):t)?u(o,"toggle"):o,t))+">\r\n  <input class="+l(i(null!=(o=null!=t?u(t,"sliderClassName"):t)?u(o,"handle"):o,t))+' type="text">\r\n</div>'},useData:!0})},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),i=n(3),l=n(37),u=function(e){function t(t){var n=e.call(this)||this;return n.getHtml=function(){var e=n.props.value,t={sliderClassName:i.default,value:e},r=document.createElement("div");return r.innerHTML=l(t),r.firstChild},n.getDomNode=function(){return n.domNode},n.setDomNode=function(e){n.domNode=e},n.destroyDom=function(){var e=n.domNode.thumb;e.parentElement.removeChild(e)},n.updateProps=function(e){n.props=e,n.redraw()},n.redraw=function(){var e=n.props,t=e.value;e.isThumb?n.domNode.thumb.textContent=""+t:n.notify("onThumbHide","")},n.props=t,n}return a(t,e),t}(o.default);t.Thumb=u},function(e,t,n){var r=n(4);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,a){var o,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<div class="+l(i(null!=(o=null!=t?u(t,"sliderClassName"):t)?u(o,"thumb"):o,t))+">"+l(i(null!=t?u(t,"value"):t,t))+"</div>"},useData:!0})},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],i=0,l=o.length;i<l;i++,a++)r[a]=o[i];return r};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),l=n(3),u=n(39),s=function(e){function t(t){var n=e.call(this)||this;return n.getProps=function(){return n.props},n.getHtml=function(){var e={sliderClassName:l.default,items:n.getRulerItems()},t=document.createElement("div");return t.innerHTML=u(e),t.firstChild},n.getDomNode=function(){return n.domNode},n.setDomNode=function(e){n.domNode=e},n.updateProps=function(e){n.props=e,n.props.isRuler?n.redraw():n.notify("onRulerHide","")},n.destroyDom=function(){var e=n.domNode.ruler;e.parentElement.removeChild(e)},n.redraw=function(){n.domNode.ruler.textContent="",Array.from(n.getHtml().childNodes).forEach((function(e){n.domNode.ruler.appendChild(e)}))},n.getRulerItems=function(){return n.getRulerValues().map((function(e){return{value:e,style:n.getTransformStyleByValue(e),class:l.default.rulerItem}}))},n.getRulerValues=function(){for(var e=n.props,t=e.range,r=e.step,a=[],i=Math.floor((t.max-t.min)/r),l=0;l<i;l++){var u=(l+1)*r+t.min;a.push(u)}return o([t.min],a,[t.max])},n.getTransformStyleByValue=function(e){var t=n.props.isVertical,r=n.getPositionByValue(e);return t?"transform: translate(0px, "+r+"%);":"transform: translate("+r+"%, 0px);"},n.props=t,n}return a(t,e),t.prototype.getPositionByValue=function(e){var t=this.props.range;return(+e-t.min)/(t.max-t.min)*1e3},t}(i.default);t.Ruler=s},function(e,t,n){var r=n(4);e.exports=(r.default||r).template({1:function(e,t,n,r,a){var o=e.lambda,i=e.escapeExpression,l=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'    <li style="'+i(o(null!=t?l(t,"style"):t,t))+'" class='+i(o(null!=t?l(t,"class"):t,t))+">"+i(o(null!=t?l(t,"value"):t,t))+"</li>\r\n"},compiler:[8,">= 4.3.0"],main:function(e,t,n,r,a){var o,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<ul class="+e.escapeExpression(e.lambda(null!=(o=null!=t?i(t,"sliderClassName"):t)?i(o,"ruler"):o,t))+">\r\n"+(null!=(o=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"items"):t,{name:"each",hash:{},fn:e.program(1,a,0),inverse:e.noop,data:a,loc:{start:{line:2,column:2},end:{line:4,column:11}}}))?o:"")+"</ul>"},useData:!0})},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(41),o=function(e,t){var n,o,i=this;this.init=function(){i.mountPanel(),i.saveDom(),i.setListeners()},this.mountPanel=function(){i.domParent.appendChild(i.getPanelContainer())},this.getPanelContainer=function(){var e=document.createElement("div"),t=i.slider.getSliderOptions(),n=t.currentValue,r={currentValue:n,range:t.range,isRuler:t.isRuler,isThumb:t.isThumb,step:t.step,decimal:t.decimal,isVertical:"vertical"===t.orientation,isDiapason:Array.isArray(n)};return e.innerHTML=a(r),e},this.saveDom=function(){i.isRange?(i.minCurrentValueContainer=i.domParent.querySelector(".config-panel__value--current-min-value"),i.maxCurrentValueContainer=i.domParent.querySelector(".config-panel__value--current-max-value"),i.minCurrentValueInput=i.domParent.querySelector(".current-min-value"),i.maxCurrentValueInput=i.domParent.querySelector(".current-max-value")):(i.currentValueContainer=i.domParent.querySelector(".config-panel__value--current-value"),i.currentValueInput=i.domParent.querySelector(".current-value")),i.valuesContainer=i.domParent.querySelector(".config-panel__values"),i.stepInput=i.domParent.querySelector(".step"),i.minRangeInput=i.domParent.querySelector(".min-range-value"),i.maxRangeInput=i.domParent.querySelector(".max-range-value"),i.isThumbCheckbox=i.domParent.querySelector(".is-thumb-show"),i.isRulerCheckbox=i.domParent.querySelector(".is-ruler-show"),i.isDiapasonCheckbox=i.domParent.querySelector(".is-diapason"),i.isVerticalCheckbox=i.domParent.querySelector(".is-vertical")},this.setListeners=function(){i.isRange?(i.minCurrentValueInput.addEventListener("input",i.debounceInput),i.maxCurrentValueInput.addEventListener("input",i.debounceInput)):i.currentValueInput.addEventListener("input",i.debounceInput),i.stepInput.addEventListener("input",i.debounceInput),i.minRangeInput.addEventListener("input",i.debounceInput),i.maxRangeInput.addEventListener("input",i.debounceInput),i.isThumbCheckbox.addEventListener("change",(function(e){var t=r({},i.slider.getSliderOptions());t.isThumb=e.target.checked,i.slider.onChangeSliderOptions(t)})),i.isRulerCheckbox.addEventListener("change",(function(e){var t=r({},i.slider.getSliderOptions());t.isRuler=e.target.checked,i.slider.onChangeSliderOptions(t)})),i.isDiapasonCheckbox.addEventListener("change",(function(e){var t=r({},i.slider.getSliderOptions()),n=e.target.checked;if(i.isRange&&!n){var a=t.currentValue[0];t.currentValue=a,i.isRange=!i.isRange,i.toggleValueInputs(a)}else!i.isRange&&n&&(a=[t.currentValue,t.range.max],t.currentValue=a,i.isRange=!i.isRange,i.toggleValueInputs(a));i.slider.onChangeSliderOptions(t)})),i.isVerticalCheckbox.addEventListener("change",(function(e){var t=r({},i.slider.getSliderOptions()),n=e.target.checked;t.orientation=n?"vertical":"horizontal",i.toggleOrientation(),i.slider.onChangeSliderOptions(t)}))},this.debounceInput=(n=function(){var e=r({},i.slider.getSliderOptions()),t={min:parseInt(i.minRangeInput.value),max:parseInt(i.maxRangeInput.value)};if(e.currentValue instanceof Array){var n=parseInt(i.minCurrentValueInput.value),a=parseInt(i.maxCurrentValueInput.value);e.currentValue=[n,a]}else e.currentValue=parseInt(i.currentValueInput.value);e.step=parseInt(i.stepInput.value),e.range=t,i.slider.onChangeSliderOptions(e)},function(e){clearTimeout(o),o=setTimeout(n,500,e)}),this.hasRange=function(){return i.slider.getSliderOptions().currentValue instanceof Array},this.onSliderOptionsUpdate=function(e){i.stepInput.value=""+e.step,i.minRangeInput.value=""+e.range.min,i.maxRangeInput.value=""+e.range.max,e.currentValue instanceof Array?(i.minCurrentValueInput.value=""+e.currentValue[0],i.maxCurrentValueInput.value=""+e.currentValue[1]):i.currentValueInput.value=""+e.currentValue},this.toggleValueInputs=function(e){if(e instanceof Array){i.valuesContainer.removeChild(i.currentValueContainer);var t=document.createElement("p");i.maxCurrentValueContainer=t,t.classList.add("config-panel__value"),t.classList.add("config-panel__value--current-max-value");var n=document.createElement("label");n.classList.add("config-panel__label"),n.textContent="Текущее макс. значение:";var r=document.createElement("input");i.maxCurrentValueInput=r,i.maxCurrentValueInput.classList.add("current-max-value"),i.maxCurrentValueInput.type="number",i.maxCurrentValueInput.value=""+e[1],i.maxCurrentValueInput.addEventListener("input",i.debounceInput),n.appendChild(i.maxCurrentValueInput),t.appendChild(n),i.valuesContainer.insertAdjacentElement("afterbegin",t);var a=document.createElement("p");i.minCurrentValueContainer=a,a.classList.add("config-panel__value"),a.classList.add("config-panel__value--current-min-value");var o=document.createElement("label");o.classList.add("config-panel__label"),o.textContent="Текущее мин. значение:";var l=document.createElement("input");i.minCurrentValueInput=l,i.minCurrentValueInput.classList.add("current-min-value"),i.minCurrentValueInput.type="number",i.minCurrentValueInput.value=""+e[0],i.minCurrentValueInput.addEventListener("input",i.debounceInput),o.appendChild(i.minCurrentValueInput),a.appendChild(o),i.valuesContainer.insertAdjacentElement("afterbegin",a)}else{i.valuesContainer.removeChild(i.minCurrentValueContainer),i.valuesContainer.removeChild(i.maxCurrentValueContainer);var u=document.createElement("p");i.currentValueContainer=u,i.currentValueContainer.classList.add("config-panel__value"),i.currentValueContainer.classList.add("config-panel__value--current-value");var s=document.createElement("label");s.classList.add("config-panel__label"),s.textContent="Текущее значение:";var c=document.createElement("input");i.currentValueInput=c,i.currentValueInput.classList.add("current-max-value"),i.currentValueInput.type="number",i.currentValueInput.value=""+e,i.currentValueInput.addEventListener("input",i.debounceInput),s.appendChild(i.currentValueInput),u.appendChild(s),i.valuesContainer.insertAdjacentElement("afterbegin",u)}},this.toggleOrientation=function(){var e=i.slider.getSliderOptions().domParent,t=e.querySelector(".range-slider__wrap");e.classList.toggle("config-panel__slider--vertical"),t.classList.toggle("config-panel__slider--vertical")},this.domParent=e,this.slider=t,this.isRange=this.hasRange(),t.subscribe("sliderOptionsUpdate",this.onSliderOptionsUpdate)};t.default=o},function(e,t,n){var r=n(4);e.exports=(r.default||r).template({1:function(e,t,n,r,a){var o,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'  <p class="config-panel__value  config-panel__value--current-min-value">\r\n    <label class="config-panel__label">\r\n      Текущее мин. значение:\r\n      <input class="current-min-value" type="number" value="'+l(i(null!=(o=null!=t?u(t,"currentValue"):t)?u(o,"0"):o,t))+'">\r\n    </label>\r\n  </p>\r\n  <p class="config-panel__value  config-panel__value--current-max-value">\r\n    <label class="config-panel__label">\r\n      Текущее макс. значение:\r\n      <input class="current-max-value" type="number" value="'+l(i(null!=(o=null!=t?u(t,"currentValue"):t)?u(o,"1"):o,t))+'">\r\n    </label>\r\n  </p>\r\n'},3:function(e,t,n,r,a){var o,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'  <p class="config-panel__value  config-panel__value--current-value">\r\n    <label class="config-panel__label">\r\n      Текущее значение:\r\n      <input class="current-value" type="number" value="'+e.escapeExpression("function"==typeof(o=null!=(o=i(n,"currentValue")||(null!=t?i(t,"currentValue"):t))?o:e.hooks.helperMissing)?o.call(null!=t?t:e.nullContext||{},{name:"currentValue",hash:{},data:a,loc:{start:{line:19,column:56},end:{line:19,column:72}}}):o)+'">\r\n    </label>\r\n  </p>\r\n'},5:function(e,t,n,r,a){return"checked"},compiler:[8,">= 4.3.0"],main:function(e,t,n,r,a){var o,i,l=null!=t?t:e.nullContext||{},u=e.escapeExpression,s=e.lambda,c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<fieldset class="config-panel__values">\r\n'+(null!=(o=c(n,"if").call(l,null!=t?c(t,"isDiapason"):t,{name:"if",hash:{},fn:e.program(1,a,0),inverse:e.program(3,a,0),data:a,loc:{start:{line:2,column:2},end:{line:22,column:9}}}))?o:"")+'  <p class="config-panel__value">\r\n    <label class="config-panel__label">\r\n      Шаг:\r\n      <input class="step" type="number" value="'+u("function"==typeof(i=null!=(i=c(n,"step")||(null!=t?c(t,"step"):t))?i:e.hooks.helperMissing)?i.call(l,{name:"step",hash:{},data:a,loc:{start:{line:26,column:47},end:{line:26,column:55}}}):i)+'">\r\n    </label>\r\n  </p>\r\n  <p class="config-panel__value">\r\n    <label class="config-panel__label">\r\n      Минимальное значение:\r\n      <input class="min-range-value" type="number" value='+u(s(null!=(o=null!=t?c(t,"range"):t)?c(o,"min"):o,t))+'>\r\n    </label>\r\n  </p>\r\n  <p class="config-panel__value">\r\n    <label class="config-panel__label">\r\n      Максимальное значение:\r\n      <input class="max-range-value" type="number" value="'+u(s(null!=(o=null!=t?c(t,"range"):t)?c(o,"max"):o,t))+'">\r\n    </label>\r\n  </p>\r\n</fieldset>\r\n<fieldset>\r\n  <p class="config-panel__value">\r\n    <label class="config-panel__label">\r\n      Показывать текущее значение:\r\n      <input class="is-thumb-show" type="checkbox" '+(null!=(o=c(n,"if").call(l,null!=t?c(t,"isThumb"):t,{name:"if",hash:{},fn:e.program(5,a,0),inverse:e.noop,data:a,loc:{start:{line:46,column:51},end:{line:46,column:80}}}))?o:"")+'>\r\n    </label>\r\n  </p>\r\n  <p class="config-panel__value">\r\n    <label class="config-panel__label">\r\n      Шкала:\r\n      <input class="is-ruler-show" type="checkbox" '+(null!=(o=c(n,"if").call(l,null!=t?c(t,"isRuler"):t,{name:"if",hash:{},fn:e.program(5,a,0),inverse:e.noop,data:a,loc:{start:{line:52,column:51},end:{line:52,column:80}}}))?o:"")+'>\r\n    </label>\r\n  </p>\r\n  <p class="config-panel__value">\r\n    <label class="config-panel__label">\r\n      Диапазон:\r\n      <input class="is-diapason" type="checkbox" '+(null!=(o=c(n,"if").call(l,null!=t?c(t,"isDiapason"):t,{name:"if",hash:{},fn:e.program(5,a,0),inverse:e.noop,data:a,loc:{start:{line:58,column:49},end:{line:58,column:81}}}))?o:"")+'>\r\n    </label>\r\n  </p>\r\n  <p class="config-panel__value">\r\n    <label class="config-panel__label">\r\n      Вертикальный слайдер:\r\n      <input class="is-vertical" type="checkbox" '+(null!=(o=c(n,"if").call(l,null!=t?c(t,"isVertical"):t,{name:"if",hash:{},fn:e.program(5,a,0),inverse:e.noop,data:a,loc:{start:{line:64,column:49},end:{line:64,column:81}}}))?o:"")+">\r\n    </label>\r\n  </p>\r\n</fieldset>"},useData:!0})},function(e,t,n){var r=n(43),a=n(44);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},i=(r(a,o),a.locals?a.locals:{});e.exports=i},function(e,t,n){"use strict";var r,a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],a=0;a<e.length;a++){var o=e[a],u=t.base?o[0]+t.base:o[0],s=n[u]||0,c="".concat(u," ").concat(s);n[u]=s+1;var d=l(c),p={css:o[1],media:o[2],sourceMap:o[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:c,updater:g(p,t),references:1}),r.push(c)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var c,d=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function g(e,t){var n,r,a;if(t.singleton){var o=h++;n=m||(m=s(t)),r=p.bind(null,n,o,!1),a=p.bind(null,n,o,!0)}else n=s(t),r=f.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=l(n[r]);i[a].references--}for(var o=u(e,t),s=0;s<n.length;s++){var c=l(n[s]);0===i[c].references&&(i[c].updater(),i.splice(c,1))}n=o}}}},function(e,t,n){(t=n(45)(!1)).push([e.i,"body{color:#eee6e6;background:#121212}.container{padding:10px 20px}.page-wrap{display:flex;flex-wrap:wrap;justify-content:space-between;margin:0 -1em}.config-panel{width:400px;margin:1em 1em}.config-panel__slider{margin-bottom:50px}.config-panel__slider--vertical{height:400px}.config-panel__title{margin:0;margin-bottom:34px;font-size:24px;font-weight:normal}.range-slider-overflow{overflow:hidden}.range-slider,.range-slider__wrap{position:relative;width:100%;height:100%}.range-slider--vertical .range-slider__bar{width:4.1px;height:100%}.range-slider--vertical .range-slider__toggle{top:-5px;left:-5px;width:auto;height:10%}.range-slider--vertical .range-slider__ruler{height:100%;top:-400px;left:-17px}.range-slider--vertical .range-slider__ruler li{top:-5px;left:-5px;width:auto;height:10%}.range-slider--vertical .range-slider__thumb{top:-4px;left:22px}.range-slider__bar{position:relative;height:4.1px;border:none;background-color:#6b6b6b}.range-slider__scale{position:absolute;top:0;left:0;z-index:1;width:100%;height:100%;background-color:#423388;transform-origin:0 0}.range-slider__ruler{position:relative;top:10px;padding:0;margin:0;list-style:none;color:#eee6e6}.range-slider__ruler li{position:absolute;top:-5px;left:-7px;z-index:4;width:10%;height:0;font-size:14px;cursor:pointer}.range-slider__toggle{position:absolute;top:-5px;left:-7px;z-index:4;width:10%;height:0}.range-slider__toggle--active{z-index:10}.range-slider__handle{box-sizing:border-box;position:absolute;z-index:1;display:block;width:14px;height:14px;font-size:0;background-color:#423388;border:none;border-radius:50%;cursor:pointer}.range-slider__thumb{position:absolute;top:-25px;left:-18px;z-index:0;min-width:41px;padding:2px 4px;color:#eee6e6;font-size:14px;text-align:center;background:#423388}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var a=(i=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(u," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([a]).join("\n")}var i,l,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t){$(document).ready((function(){const e=$("#defaultSlider").rangeSlider({currentValue:15,range:{min:10,max:30},isRuler:!0,isThumb:!0}),t=$("#rangeSlider").rangeSlider({currentValue:[15,25],range:{min:10,max:30},isRuler:!0,isThumb:!0}),n=$("#stepSlider").rangeSlider({currentValue:10,range:{min:10,max:30},step:5,isRuler:!0,isThumb:!0}),r=$("#verticalSlider").rangeSlider({currentValue:15,range:{min:10,max:30},isRuler:!0,isThumb:!0,orientation:"vertical"});$("#defaultSliderConfig").configPanel(e),$("#rangeSliderConfig").configPanel(t),$("#stepSliderConfig").configPanel(n),$("#verticalSliderConfig").configPanel(r)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,