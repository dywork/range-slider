!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=12)}([function(e,t,n){"use strict";t.__esModule=!0,t.extend=l,t.indexOf=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},t.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}if(!o.test(e))return e;return e.replace(a,i)},t.isEmpty=function(e){return!e&&0!==e||!(!c(e)||0!==e.length)},t.createFrame=function(e){var t=l({},e);return t._parent=e,t},t.blockParams=function(e,t){return e.path=t,e},t.appendContextPath=function(e,t){return(e?e+".":"")+t};var r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},a=/[&<>"'`=]/g,o=/[&<>"'`=]/;function i(e){return r[e]}function l(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}var u=Object.prototype.toString;t.toString=u;var s=function(e){return"function"==typeof e};s(/x/)&&(t.isFunction=s=function(e){return"function"==typeof e&&"[object Function]"===u.call(e)}),t.isFunction=s;var c=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===u.call(e)};t.isArray=c},function(e,t,n){"use strict";t.__esModule=!0;var r=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function a(e,t){var n=t&&t.loc,o=void 0,i=void 0,l=void 0,u=void 0;n&&(o=n.start.line,i=n.end.line,l=n.start.column,u=n.end.column,e+=" - "+o+":"+l);for(var s=Error.prototype.constructor.call(this,e),c=0;c<r.length;c++)this[r[c]]=s[r[c]];Error.captureStackTrace&&Error.captureStackTrace(this,a);try{n&&(this.lineNumber=o,this.endLineNumber=i,Object.defineProperty?(Object.defineProperty(this,"column",{value:l,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:u,enumerable:!0})):(this.column=l,this.endColumn=u))}catch(e){}}a.prototype=new Error,t.default=a,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),a=function(){var e=this;this.subscribe=function(t,n){r(e.subscribers,t)||(e.subscribers[t]=[]),e.subscribers[t].push(n)},this.notify=function(t,n){e.subscribers[t]&&e.subscribers[t].forEach((function(e){return e(n)}))},this.subscribers={}};t.default=a},function(e,t,n){"use strict";var r=n(14);e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={overflowFix:"range-slider-overflow",slider:"range-slider",sliderVertical:"range-slider_vertical",wrap:"range-slider__wrap",bar:"range-slider__bar",scale:"range-slider__scale",toggle:"range-slider__toggle",toggleActive:"range-slider__toggle_active",handle:"range-slider__handle",thumb:"range-slider__thumb",ruler:"range-slider__ruler",rulerItem:"range-slider__ruler-item"}},function(e,t,n){e.exports=n(21).default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={currentValues:{min:10},range:{min:10,max:30},withThumb:!0,withRuler:!1,step:1,orientation:"horizontal",maxDecimalPlace:1}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.HandlebarsEnvironment=c;var a=n(0),o=r(n(1)),i=n(8),l=n(29),u=r(n(10)),s=n(11);t.VERSION="4.7.6";t.COMPILER_REVISION=8;t.LAST_COMPATIBLE_COMPILER_REVISION=7;t.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};function c(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},i.registerDefaultHelpers(this),l.registerDefaultDecorators(this)}c.prototype={constructor:c,logger:u.default,log:u.default.log,registerHelper:function(e,t){if("[object Object]"===a.toString.call(e)){if(t)throw new o.default("Arg not supported with multiple helpers");a.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if("[object Object]"===a.toString.call(e))a.extend(this.partials,e);else{if(void 0===t)throw new o.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if("[object Object]"===a.toString.call(e)){if(t)throw new o.default("Arg not supported with multiple decorators");a.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses:function(){s.resetLoggedProperties()}};var p=u.default.log;t.log=p,t.createFrame=a.createFrame,t.logger=u.default},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.registerDefaultHelpers=function(e){a.default(e),o.default(e),i.default(e),l.default(e),u.default(e),s.default(e),c.default(e)},t.moveHelperToHooks=function(e,t,n){e.helpers[t]&&(e.hooks[t]=e.helpers[t],n||delete e.helpers[t])};var a=r(n(22)),o=r(n(23)),i=r(n(24)),l=r(n(25)),u=r(n(26)),s=r(n(27)),c=r(n(28))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),a={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=r.indexOf(a.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=a.lookupLevel(e),"undefined"!=typeof console&&a.lookupLevel(a.level)<=e){var t=a.methodMap[e];console[t]||(t="log");for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];console[t].apply(console,r)}}};t.default=a,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.createProtoAccessControl=function(e){var t=Object.create(null);t.constructor=!1,t.__defineGetter__=!1,t.__defineSetter__=!1,t.__lookupGetter__=!1;var n=Object.create(null);return n.__proto__=!1,{properties:{whitelist:r.createNewLookupObject(n,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:r.createNewLookupObject(t,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}},t.resultIsAllowed=function(e,t,n){return i("function"==typeof e?t.methods:t.properties,n)},t.resetLoggedProperties=function(){Object.keys(o).forEach((function(e){delete o[e]}))};var r=n(31),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(10)),o=Object.create(null);function i(e,t){return void 0!==e.whitelist[t]?!0===e.whitelist[t]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==o[e]&&(o[e]=!0,a.log("error",'Handlebars: Access has been denied to resolve the property "'+e+'" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(t),!1)}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(13),o=n(6),i=n(42);n(45),n(49),function(e){var t=jQuery;t.fn.rangeSlider=function(e){var n=e;n=t.extend(r({domParent:this[0]},o.default),n);var i=new a.default(n);return i.init(),i},t.fn.configPanel=function(e){var t=new i.default(this[0],e);return t.init(),t}}()},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),i=n(16),l=function(e){function t(t){var n=e.call(this)||this;return n.init=function(){n.presenter.init(),n.presenter.subscribe("modelOptionsUpdate",n._alertSubs)},n.updateOptions=function(e){n.presenter.updateOptions(e)},n.getModelOptions=function(){return n.presenter.getModelOptions()},n.getDomParent=function(){return n.presenter.getDomParent()},n.getRulerValues=function(){return n.presenter.getRulerValues()},n._alertSubs=function(){n.notify("modelOptionsUpdate",n.getModelOptions())},n.presenter=new i.default(t),n}return a(t,e),t}(o.default);t.default=l},function(e,t,n){"use strict";var r=n(15);e.exports=Function.prototype.bind||r},function(e,t,n){"use strict";var r="Function.prototype.bind called on incompatible ",a=Array.prototype.slice,o=Object.prototype.toString;e.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==o.call(t))throw new TypeError(r+t);for(var n,i=a.call(arguments,1),l=function(){if(this instanceof n){var r=t.apply(this,i.concat(a.call(arguments)));return Object(r)===r?r:this}return t.apply(e,i.concat(a.call(arguments)))},u=Math.max(0,t.length-i.length),s=[],c=0;c<u;c++)s.push("$"+c);if(n=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")(l),t.prototype){var p=function(){};p.prototype=t.prototype,n.prototype=new p,p.prototype=null}return n}},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(17),i=n(18),l=n(2),u=n(3),s=function(e){function t(t){var n=e.call(this)||this;return n.init=function(){n._subscribeModules(),n.view.render()},n.updateOptions=function(e){n._checkOnChangeRange(e),n._checkOnChangeOrientation(e),n.model.updateOptions(n._getSplitModelOptions(e))},n.getModelOptions=function(){return n.model.getOptions()},n.getDomParent=function(){return n.domParent},n.getRulerValues=function(){return n.view.getRulerValues()},n._getSplitModelOptions=function(e){return{currentValues:e.currentValues,range:e.range,withRuler:e.withRuler,withThumb:e.withThumb,step:e.step,orientation:e.orientation,maxDecimalPlace:e.maxDecimalPlace,rulerStep:e.rulerStep}},n._subscribeModules=function(){n.model.subscribe("modelOptionsUpdate",n._onModelOptionsUpdate),n.view.subscribe("modelOptionsUpdate",n._onViewChangedModelOptions)},n._onModelOptionsUpdate=function(e){n.view.updateModelOptions(e),n.notify("modelOptionsUpdate",n.model.getOptions())},n._onViewChangedModelOptions=function(e){n.model.updateOptions(e),n.notify("modelOptionsUpdate",n.model.getOptions())},n._checkOnChangeRange=function(e){var t=n.model.getOptions().currentValues,r=e.currentValues,a=u(t,"max"),o=u(r,"max");(!a&&o||a&&!o)&&(n.view.destroyDom(),n.view=new i.default(e,n.domParent),n.view.subscribe("modelOptionsUpdate",n._onViewChangedModelOptions),n.view.render())},n._checkOnChangeOrientation=function(e){n.model.getOptions().orientation!==e.orientation&&(n.view.destroyDom(),n.view=new i.default(e,n.domParent),n.view.subscribe("modelOptionsUpdate",n._onViewChangedModelOptions),n.view.render())},n.domParent=t.domParent,n.model=new o.default(n._getSplitModelOptions(t)),n.view=new i.default(n.model.getOptions(),t.domParent),n}return a(t,e),t}(l.default);t.default=s},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(6),l=n(2),u=n(3),s=function(e){function t(t){var n=e.call(this)||this;return n.getOptions=function(){return n.modelOptions},n.updateOptions=function(e){n.modelOptions=n._getConfirmedOptions(e),n.notify("modelOptionsUpdate",n.modelOptions)},n._getConfirmedOptions=function(e){var t=o({},e),n=t.currentValues,r=t.range,a=t.step,l=t.rulerStep,s=Number.isNaN(n.min)||Number.isNaN(n.max),c=Number.isNaN(r.min)||Number.isNaN(r.max),p=Number.isNaN(a),d=u(n,"max");(c&&(t.range.min=i.default.range.min,t.range.max=i.default.range.max),s&&(t.currentValues.min=i.default.currentValues.min,d&&(t.currentValues.max=r.max)),(p||a<=0)&&(t.step=i.default.step),void 0!==l)&&(l<a&&(t.rulerStep=a),l%a==0||(t.rulerStep=a));return r.min>r.max&&(t.range.min=r.max),n.min<r.min&&(t.currentValues.min=r.min),n.max>r.max&&(t.currentValues.max=r.max),n.min>r.max&&(t.currentValues.min=r.max),n.max<r.min&&(t.currentValues.max=r.min),n.max<n.min&&(n.min=r.min,n.max=r.max),t},n.modelOptions=n._getConfirmedOptions(t),n}return a(t,e),t}(l.default);t.default=s},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(19),l=n(36),u=n(38),s=n(40),c=n(4),p=n(2),d=n(3),f=function(e){function t(t,n){var r=e.call(this)||this;r.render=function(){r._mountSlider(),r._saveDom(),r._setListeners()},r.destroyDom=function(){r.domParent.removeChild(r.slider)},r.updateModelOptions=function(e){r.modelOptions=e,r._redrawValue()},r.getRulerValues=function(){return r.ruler.getRulerValues()},r._initViewComponents=function(){var e=r.modelOptions.withRuler;r.ruler=e?r._getRuler():null,r.scale=r._getScale(),r.toggles=r._getToggles()},r._getRuler=function(){var e=new i.default(r._getRulerProps());return e.subscribe("onRulerHide",r._onRulerHide),e},r._getRulerProps=function(){var e=r.modelOptions,t=e.range,n=e.step,a=e.withRuler,o=e.maxDecimalPlace,i=e.rulerStep;return n?{range:t,step:n,withRuler:a,isVertical:r.isVertical,maxDecimalPlace:o,rulerStep:i}:{range:t,step:1,withRuler:a,isVertical:r.isVertical,maxDecimalPlace:o,rulerStep:i}},r._onRulerHide=function(){r.ruler&&(r.ruler.destroyDom(),r.ruler=null)},r._getScale=function(){return new l.default(r._getScaleProps())},r._getScaleProps=function(){var e=r.modelOptions;return{currentValues:e.currentValues,range:e.range,isVertical:r.isVertical}},r._getToggles=function(){var e=r.modelOptions,t=e.currentValues,n=e.withThumb;return Object.entries(t).map((function(e){var t=e[1],a={scalePosition:r.scale.getPosition(t),isVertical:r.isVertical},o={main:new s.default(a),thumb:n?new u.default(r._getThumbProps(t)):null};return o.thumb&&o.thumb.subscribe("onThumbHide",r._onThumbHide),o}))},r._getThumbProps=function(e){return{withThumb:r.modelOptions.withThumb,value:e}},r._onThumbHide=function(){r.toggles.forEach((function(e){e.thumb&&(e.thumb.destroyDom(),e.thumb=null)}))},r._mountSlider=function(){r.domParent.appendChild(r._createSliderContainer())},r._createSliderContainer=function(){var e=document.createElement("div");e.classList.add(c.default.slider);var t=document.createElement("div");return t.classList.add(c.default.wrap),r.isVertical&&t.classList.add(c.default.sliderVertical),t.appendChild(r.scale.getHtml()),r.ruler&&t.appendChild(r.ruler.getHtml()),r.toggles.forEach((function(e){var n=e.main.getHtml();e.thumb&&n.appendChild(e.thumb.getHtml()),t.appendChild(n)})),e.appendChild(t),e},r._saveDom=function(){r.slider=r.domParent.querySelector("."+c.default.slider),r._saveScaleDom(),r._saveTogglesDom(),r.ruler&&r._saveRuler(),r.modelOptions.withThumb&&r._saveThumbDom()},r._saveScaleDom=function(){return r.scale.setDomNode(r._getScaleDom())},r._getScaleDom=function(){var e=r.domParent.querySelector("."+c.default.bar);return{scale:r.domParent.querySelector("."+c.default.scale),bar:e}},r._saveTogglesDom=function(){r.domParent.querySelectorAll("."+c.default.toggle).forEach((function(e,t){var n={toggle:e,handle:e.querySelector("."+c.default.handle)};r.toggles[t].main.setDomNode(n)}))},r._saveRuler=function(){var e=r.domParent.querySelector("."+c.default.ruler);r.ruler.setDomNode({ruler:e})},r._saveThumbDom=function(){r.domParent.querySelectorAll("."+c.default.thumb).forEach((function(e,t){r.toggles[t].thumb.setDomNode({thumb:e})}))},r._setListeners=function(){r.ruler&&r.ruler.getDomNode().ruler.addEventListener("click",r._onRulerClick);r.toggles.forEach((function(e,t){e.main.getDomNode().handle.addEventListener("mousedown",(function(e){r._onToggleMouseDown(e,t)}))}))},r._onRulerClick=function(e){var t=e.target;if(t.classList.contains(""+c.default.rulerItem)){var n=+t.textContent,a=o({},r.modelOptions),i=a.currentValues;if(r.isRange){var l=i.min,u=i.max,s=void 0;n<l&&(s=0),n>l&&n<u&&(s=Math.round(n/(l+u))),n>u&&(s=1),s>0?i.max=n:i.min=n}else i.min=n;r._dispatchModelOptions(a)}},r._onToggleMouseDown=function(e,t){e.preventDefault(),r.activeToggle=r.toggles[t].main,r.activeToggleIndex=t,r.toggles.forEach((function(e,t){var n=e.main.getDomNode().toggle;t===r.activeToggleIndex?n.classList.add(c.default.toggleActive):n.classList.remove(c.default.toggleActive)})),document.addEventListener("mousemove",r._onToggleMove),document.addEventListener("mouseup",r._onToggleUp)},r._onToggleMove=function(e){e.preventDefault(),r._changeCurrentValue({x:e.pageX,y:e.pageY})},r._onToggleUp=function(e){e.preventDefault(),document.removeEventListener("mousemove",r._onToggleMove),document.removeEventListener("mouseup",r._onToggleUp)},r._changeCurrentValue=function(e){var t=r._getCleanCoordinate(e),n=r._getPercent(t),a=r._getCurrentValueByPercent(n),i=o({},r.modelOptions),l={0:"min",1:"max"}[r.activeToggleIndex];if(r.isRange){var u=0===r.activeToggleIndex,s=1===r.activeToggleIndex,c=u?i.currentValues.max:i.currentValues.min,p=s?i.currentValues.min:i.currentValues.max;if(u){var d=a>=p;i.currentValues[l]=d?p:a}else if(s){d=a<=c;i.currentValues[l]=d?c:a}}else i.currentValues[l]=a;r._dispatchModelOptions(i)},r._getCleanCoordinate=function(e){var t=r.activeToggle.getDomNode().toggle.offsetWidth/4,n=r.isVertical?5:7,a=(r.isVertical?r.slider.offsetTop:r.slider.offsetLeft)-t+n;return r.isVertical?e.y-a:e.x-a},r._getPercent=function(e){var t=e/(r.isVertical?r.slider.offsetHeight:r.slider.offsetWidth);return t>1&&(t=1),t<0&&(t=0),t},r._getCurrentValueByPercent=function(e){var t=r.modelOptions,n=t.range,a=t.step,o=t.maxDecimalPlace,i=e*(n.max-n.min)+n.min;return a?r._getStepCurrentValue(i):+i.toFixed(o)},r._getStepCurrentValue=function(e){var t=r.modelOptions,n=t.step,a=t.range,o=t.maxDecimalPlace,i=Math.round((e-a.min)/n)*n+a.min;return e-a.max==0&&(i=a.max),i>=a.max&&(i=a.max),+i.toFixed(o)},r._dispatchModelOptions=function(e){r.notify("modelOptionsUpdate",e)},r._redrawValue=function(){r.scale.updateProps(r._getScaleProps()),r.modelOptions.withRuler?r.ruler?r._hasRulerPropsChange()&&r.ruler.updateProps(r._getRulerProps()):r._onRulerMount():r.ruler&&r._hasRulerPropsChange()&&r.ruler.updateProps(r._getRulerProps());var e=r.modelOptions,t=e.currentValues,n=e.withThumb;Object.entries(t).forEach((function(e){var t=e[0],a=e[1],o={min:0,max:1}[t],i={scalePosition:r.scale.getPosition(a),isVertical:r.isVertical};r.toggles[o].main.updateProps(i);var l=r.toggles[o].thumb;n?l?l.updateProps(r._getThumbProps(a)):r._onThumbMount():l&&l.updateProps(r._getThumbProps(a))}))},r._hasRulerPropsChange=function(){var e=r.ruler.getProps(),t=r._getRulerProps();return JSON.stringify(e)!==JSON.stringify(t)},r._onRulerMount=function(){r.ruler=new i.default(r._getRulerProps()),r.ruler.subscribe("onRulerHide",r._onRulerHide);var e=r.ruler.getHtml();r.slider.querySelector("."+c.default.wrap).appendChild(e),r.ruler.setDomNode({ruler:e}),r.ruler.getDomNode().ruler.addEventListener("click",r._onRulerClick)},r._onThumbMount=function(){var e=r.modelOptions.currentValues;Object.entries(e).forEach((function(e){var t=e[0],n=e[1],a={min:0,max:1}[t],o=r.toggles[a];o.thumb=new u.default(r._getThumbProps(n)),o.thumb.subscribe("onThumbHide",r._onThumbHide);var i=o.main.getDomNode().toggle;i.appendChild(o.thumb.getHtml());var l=i.querySelector("."+c.default.thumb);o.thumb.setDomNode({thumb:l})}))},r.modelOptions=t,r.domParent=n;var a=r.modelOptions,p=a.currentValues,f=a.orientation;return r.isVertical="vertical"===f,r.isRange=d(p,"max"),r._initViewComponents(),r}return a(t,e),t}(p.default);t.default=f},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],i=0,l=o.length;i<l;i++,a++)r[a]=o[i];return r};Object.defineProperty(t,"__esModule",{value:!0});var i=n(4),l=n(2),u=n(20),s=function(e){function t(t){var n=e.call(this)||this;return n.getProps=function(){return n.props},n.getHtml=function(){var e={sliderClassNames:i.default,items:n._getRulerItems()},t=document.createElement("div");return t.innerHTML=u(e),t.firstChild},n.getDomNode=function(){return n.domNode},n.setDomNode=function(e){n.domNode=e},n.updateProps=function(e){n.props=e,n.props.withRuler?n._redraw():n.notify("onRulerHide","")},n.destroyDom=function(){var e=n.domNode.ruler;e.parentElement.removeChild(e)},n.getRulerValues=function(){for(var e=n.props,t=e.range,r=e.step,a=e.maxDecimalPlace,i=e.rulerStep||r,l=[],u=Math.floor((t.max-t.min)/i),s=0;s<u;s++){var c=(s+1)*i+t.min;l.push(+c.toFixed(a))}return o([t.min],l,[t.max])},n._redraw=function(){n.domNode.ruler.textContent="",Array.from(n.getHtml().childNodes).forEach((function(e){n.domNode.ruler.appendChild(e)}))},n._getRulerItems=function(){return n.getRulerValues().map((function(e){return{value:e,style:n._getTransformStyleByValue(e),class:i.default.rulerItem}}))},n._getTransformStyleByValue=function(e){var t=n.props.isVertical,r=n._getPositionByValue(e);return t?"transform: translate(0px, "+r+"%);":"transform: translate("+r+"%, 0px);"},n.props=t,n}return a(t,e),t.prototype._getPositionByValue=function(e){var t=this.props.range;return(+e-t.min)/(t.max-t.min)*1e3},t}(l.default);t.default=s},function(e,t,n){var r=n(5);e.exports=(r.default||r).template({1:function(e,t,n,r,a){var o=e.lambda,i=e.escapeExpression,l=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'    <li style="'+i(o(null!=t?l(t,"style"):t,t))+'" class='+i(o(null!=t?l(t,"class"):t,t))+">"+i(o(null!=t?l(t,"value"):t,t))+"</li>\n"},compiler:[8,">= 4.3.0"],main:function(e,t,n,r,a){var o,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<ul class="+e.escapeExpression(e.lambda(null!=(o=null!=t?i(t,"sliderClassNames"):t)?i(o,"ruler"):o,t))+">\n"+(null!=(o=i(n,"each").call(null!=t?t:e.nullContext||{},null!=t?i(t,"items"):t,{name:"each",hash:{},fn:e.program(1,a,0),inverse:e.noop,data:a,loc:{start:{line:2,column:2},end:{line:4,column:11}}}))?o:"")+"</ul>"},useData:!0})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}t.__esModule=!0;var o=a(n(7)),i=r(n(32)),l=r(n(1)),u=a(n(0)),s=a(n(33)),c=r(n(35));function p(){var e=new o.HandlebarsEnvironment;return u.extend(e,o),e.SafeString=i.default,e.Exception=l.default,e.Utils=u,e.escapeExpression=u.escapeExpression,e.VM=s,e.template=function(t){return s.template(t,e)},e}var d=p();d.create=p,c.default(d),d.default=d,t.default=d,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0);t.default=function(e){e.registerHelper("blockHelperMissing",(function(t,n){var a=n.inverse,o=n.fn;if(!0===t)return o(this);if(!1===t||null==t)return a(this);if(r.isArray(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):a(this);if(n.data&&n.ids){var i=r.createFrame(n.data);i.contextPath=r.appendContextPath(n.data.contextPath,n.name),n={data:i}}return o(t,n)}))},e.exports=t.default},function(e,t,n){"use strict";(function(r){t.__esModule=!0;var a,o=n(0),i=n(1),l=(a=i)&&a.__esModule?a:{default:a};t.default=function(e){e.registerHelper("each",(function(e,t){if(!t)throw new l.default("Must pass iterator to #each");var n,a=t.fn,i=t.inverse,u=0,s="",c=void 0,p=void 0;function d(t,n,r){c&&(c.key=t,c.index=n,c.first=0===n,c.last=!!r,p&&(c.contextPath=p+t)),s+=a(e[t],{data:c,blockParams:o.blockParams([e[t],t],[p+t,null])})}if(t.data&&t.ids&&(p=o.appendContextPath(t.data.contextPath,t.ids[0])+"."),o.isFunction(e)&&(e=e.call(this)),t.data&&(c=o.createFrame(t.data)),e&&"object"==typeof e)if(o.isArray(e))for(var f=e.length;u<f;u++)u in e&&d(u,u,u===e.length-1);else if(r.Symbol&&e[r.Symbol.iterator]){for(var m=[],h=e[r.Symbol.iterator](),g=h.next();!g.done;g=h.next())m.push(g.value);for(f=(e=m).length;u<f;u++)d(u,u,u===e.length-1)}else n=void 0,Object.keys(e).forEach((function(e){void 0!==n&&d(n,u-1),n=e,u++})),void 0!==n&&d(n,u-1,!0);return 0===u&&(s=i(this)),s}))},e.exports=t.default}).call(this,n(9))},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new o.default('Missing helper: "'+arguments[arguments.length-1].name+'"')}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(0),o=n(1),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("if",(function(e,t){if(2!=arguments.length)throw new i.default("#if requires exactly one argument");return a.isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||a.isEmpty(e)?t.inverse(this):t.fn(this)})),e.registerHelper("unless",(function(t,n){if(2!=arguments.length)throw new i.default("#unless requires exactly one argument");return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("log",(function(){for(var t=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)t.push(arguments[r]);var a=1;null!=n.hash.level?a=n.hash.level:n.data&&null!=n.data.level&&(a=n.data.level),t[0]=a,e.log.apply(e,t)}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("lookup",(function(e,t,n){return e?n.lookupProperty(e,t):e}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r,a=n(0),o=n(1),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("with",(function(e,t){if(2!=arguments.length)throw new i.default("#with requires exactly one argument");a.isFunction(e)&&(e=e.call(this));var n=t.fn;if(a.isEmpty(e))return t.inverse(this);var r=t.data;return t.data&&t.ids&&((r=a.createFrame(t.data)).contextPath=a.appendContextPath(t.data.contextPath,t.ids[0])),n(e,{data:r,blockParams:a.blockParams([e],[r&&r.contextPath])})}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.registerDefaultDecorators=function(e){o.default(e)};var r,a=n(30),o=(r=a)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0);t.default=function(e){e.registerDecorator("inline",(function(e,t,n,a){var o=e;return t.partials||(t.partials={},o=function(a,o){var i=n.partials;n.partials=r.extend({},i,t.partials);var l=e(a,o);return n.partials=i,l}),t.partials[a.args[0]]=a.fn,o}))},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.createNewLookupObject=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.extend.apply(void 0,[Object.create(null)].concat(t))};var r=n(0)},function(e,t,n){"use strict";function r(e){this.string=e}t.__esModule=!0,r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},t.default=r,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.checkRevision=function(e){var t=e&&e[0]||1,n=l.COMPILER_REVISION;if(t>=l.LAST_COMPATIBLE_COMPILER_REVISION&&t<=l.COMPILER_REVISION)return;if(t<l.LAST_COMPATIBLE_COMPILER_REVISION){var r=l.REVISION_CHANGES[n],a=l.REVISION_CHANGES[t];throw new i.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+a+").")}throw new i.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")},t.template=function(e,t){if(!t)throw new i.default("No environment passed to template");if(!e||!e.main)throw new i.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var n=e.compiler&&7===e.compiler[0];var r={strict:function(e,t,n){if(!e||!(t in e))throw new i.default('"'+t+'" not defined in '+e,{loc:n});return e[t]},lookupProperty:function(e,t){var n=e[t];return null==n||Object.prototype.hasOwnProperty.call(e,t)||c.resultIsAllowed(n,r.protoAccessControl,t)?n:void 0},lookup:function(e,t){for(var n=e.length,a=0;a<n;a++){if(null!=(e[a]&&r.lookupProperty(e[a],t)))return e[a][t]}},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:a.escapeExpression,invokePartial:function(n,r,o){o.hash&&(r=a.extend({},r,o.hash),o.ids&&(o.ids[0]=!0)),n=t.VM.resolvePartial.call(this,n,r,o);var l=a.extend({},o,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),u=t.VM.invokePartial.call(this,n,r,l);if(null==u&&t.compile&&(o.partials[o.name]=t.compile(n,e.compilerOptions,t),u=o.partials[o.name](r,l)),null!=u){if(o.indent){for(var s=u.split("\n"),c=0,p=s.length;c<p&&(s[c]||c+1!==p);c++)s[c]=o.indent+s[c];u=s.join("\n")}return u}throw new i.default("The partial "+o.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var n=e[t];return n.decorator=e[t+"_d"],n},programs:[],program:function(e,t,n,r,a){var o=this.programs[e],i=this.fn(e);return t||a||r||n?o=p(this,e,i,t,n,r,a):o||(o=this.programs[e]=p(this,e,i)),o},data:function(e,t){for(;e&&t--;)e=e._parent;return e},mergeIfNeeded:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=a.extend({},t,e)),n},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function o(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=n.data;o._setup(n),!n.partial&&e.useData&&(a=f(t,a));var i=void 0,l=e.useBlockParams?[]:void 0;function u(t){return""+e.main(r,t,r.helpers,r.partials,a,l,i)}return e.useDepths&&(i=n.depths?t!=n.depths[0]?[t].concat(n.depths):n.depths:[t]),(u=m(e.main,u,r,n.depths||[],a,l))(t,n)}return o.isTop=!0,o._setup=function(o){if(o.partial)r.protoAccessControl=o.protoAccessControl,r.helpers=o.helpers,r.partials=o.partials,r.decorators=o.decorators,r.hooks=o.hooks;else{var i=a.extend({},t.helpers,o.helpers);!function(e,t){Object.keys(e).forEach((function(n){var r=e[n];e[n]=function(e,t){var n=t.lookupProperty;return s.wrapHelper(e,(function(e){return a.extend({lookupProperty:n},e)}))}(r,t)}))}(i,r),r.helpers=i,e.usePartial&&(r.partials=r.mergeIfNeeded(o.partials,t.partials)),(e.usePartial||e.useDecorators)&&(r.decorators=a.extend({},t.decorators,o.decorators)),r.hooks={},r.protoAccessControl=c.createProtoAccessControl(o);var l=o.allowCallsToHelperMissing||n;u.moveHelperToHooks(r,"helperMissing",l),u.moveHelperToHooks(r,"blockHelperMissing",l)}},o._child=function(t,n,a,o){if(e.useBlockParams&&!a)throw new i.default("must pass block params");if(e.useDepths&&!o)throw new i.default("must pass parent depths");return p(r,t,e[t],n,0,a,o)},o},t.wrapProgram=p,t.resolvePartial=function(e,t,n){e?e.call||n.name||(n.name=e,e=n.partials[e]):e="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name];return e},t.invokePartial=function(e,t,n){var r=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var o=void 0;n.fn&&n.fn!==d&&function(){n.data=l.createFrame(n.data);var e=n.fn;o=n.data["partial-block"]=function(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=l.createFrame(n.data),n.data["partial-block"]=r,e(t,n)},e.partials&&(n.partials=a.extend({},n.partials,e.partials))}();void 0===e&&o&&(e=o);if(void 0===e)throw new i.default("The partial "+n.name+" could not be found");if(e instanceof Function)return e(t,n)},t.noop=d;var r,a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0)),o=n(1),i=(r=o)&&r.__esModule?r:{default:r},l=n(7),u=n(8),s=n(34),c=n(11);function p(e,t,n,r,a,o,i){function l(t){var a=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],l=i;return!i||t==i[0]||t===e.nullContext&&null===i[0]||(l=[t].concat(i)),n(e,t,e.helpers,e.partials,a.data||r,o&&[a.blockParams].concat(o),l)}return(l=m(n,l,e,i,r,o)).program=t,l.depth=i?i.length:0,l.blockParams=a||0,l}function d(){return""}function f(e,t){return t&&"root"in t||((t=t?l.createFrame(t):{}).root=e),t}function m(e,t,n,r,o,i){if(e.decorator){var l={};t=e.decorator(t,l,n,r&&r[0],o,i,r),a.extend(t,l)}return t}},function(e,t,n){"use strict";t.__esModule=!0,t.wrapHelper=function(e,t){if("function"!=typeof e)return e;return function(){var n=arguments[arguments.length-1];return arguments[arguments.length-1]=t(n),e.apply(this,arguments)}}},function(e,t,n){"use strict";(function(n){t.__esModule=!0,t.default=function(e){var t=void 0!==n?n:window,r=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=r),e}},e.exports=t.default}).call(this,n(9))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),a=n(3),o=n(37),i=function(e){var t=this;this.getHtml=function(){var e={sliderClassNames:r.default},n=document.createElement("div");return n.innerHTML=o(e),n.querySelector("."+r.default.scale).setAttribute("style",t._getTransformStyle()),n.firstChild},this.getPosition=function(e){var n=t.props.range;return(+e-n.min)/(n.max-n.min)},this.getDomNode=function(){return t.domNode},this.setDomNode=function(e){t.domNode=e},this.updateProps=function(e){t.props=e,t._redraw()},this._redraw=function(){t.domNode.scale.setAttribute("style",t._getTransformStyle())},this._getTransformStyle=function(){var e=t.props,n=e.currentValues,r=e.isVertical;if(a(n,"max")){var o=Object.entries(n).map((function(e){var n=e[1];return t.getPosition(n)})),i=100*o[0],l=o[1]-.01*i;return r?"transform: translate(0px, "+i+"%) scale(1, "+l+");":"transform: translate("+i+"%, 0px) scale("+l+", 1);"}var u=t.getPosition(n.min);return r?"transform: scale(1, "+u+");":"transform: scale("+u+", 1);"},this.props=e};t.default=i},function(e,t,n){var r=n(5);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,a){var o,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<div class="+l(i(null!=(o=null!=t?u(t,"sliderClassNames"):t)?u(o,"bar"):o,t))+">\n  <div class="+l(i(null!=(o=null!=t?u(t,"sliderClassNames"):t)?u(o,"scale"):o,t))+"></div>\n</div>"},useData:!0})},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),i=n(2),l=n(39),u=function(e){function t(t){var n=e.call(this)||this;return n.getHtml=function(){var e=n.props.value,t={sliderClassNames:o.default,value:e},r=document.createElement("div");return r.innerHTML=l(t),r.firstChild},n.getDomNode=function(){return n.domNode},n.setDomNode=function(e){n.domNode=e},n.destroyDom=function(){var e=n.domNode.thumb;e.parentElement.removeChild(e)},n.updateProps=function(e){n.props=e,n._redraw()},n._redraw=function(){var e=n.props,t=e.value;e.withThumb?n.domNode.thumb.textContent=""+t:n.notify("onThumbHide","")},n.props=t,n}return a(t,e),t}(i.default);t.default=u},function(e,t,n){var r=n(5);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,a){var o,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<div class="+l(i(null!=(o=null!=t?u(t,"sliderClassNames"):t)?u(o,"thumb"):o,t))+">"+l(i(null!=t?u(t,"value"):t,t))+"</div>"},useData:!0})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),a=n(41),o=function(e){var t=this;this.getHtml=function(){var e={sliderClassNames:r.default},n=document.createElement("div");return n.innerHTML=a(e),n.querySelector("."+r.default.toggle).setAttribute("style",t._getTransformStyle()),n.firstChild},this.getDomNode=function(){return t.domNode},this.setDomNode=function(e){t.domNode=e},this.updateProps=function(e){t.props=e,t._redraw()},this._redraw=function(){t.domNode.toggle.setAttribute("style",t._getTransformStyle())},this._getTransformStyle=function(){var e=t.props.isVertical,n=t._getPosition();return e?"transform: translate(0px, "+n+"%);":"transform: translate("+n+"%, 0px);"},this._getPosition=function(){return 1e3*t.props.scalePosition},this.props=e};t.default=o},function(e,t,n){var r=n(5);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,a){var o,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return"<div class="+l(i(null!=(o=null!=t?u(t,"sliderClassNames"):t)?u(o,"toggle"):o,t))+">\n  <input class="+l(i(null!=(o=null!=t?u(t,"sliderClassNames"):t)?u(o,"handle"):o,t))+' type="text">\n</div>'},useData:!0})},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(43),o=n(3),i=n(44),l=function(e,t){var n,l,u=this;this.init=function(){u._mountPanel(),u._saveDom(),u._setListeners(),u.slider.subscribe("modelOptionsUpdate",u._onOptionsUpdate)},this._mountPanel=function(){u.domParent.appendChild(u._getPanelContainer())},this._getPanelContainer=function(){var e=document.createElement("div"),t=u.slider.getModelOptions(),n=t.currentValues,r=t.range,a=t.withRuler,o=t.withThumb,l=t.step,s=t.orientation,c=t.maxDecimalPlace,p=t.rulerStep,d={currentValues:n,range:r,withRuler:a,withThumb:o,step:l,isVertical:"vertical"===s,isRange:u._hasRange(),withFractional:u.withFractional,maxDecimalPlace:c,rulerStep:p};return e.innerHTML=i(d),e},this._hasRange=function(){var e=u.slider.getModelOptions().currentValues;return o(e,"max")},this._hasFractional=function(){return u.slider.getRulerValues().some((function(e){return!Number.isInteger(e)}))},this._saveDom=function(){u.isRange?(u.minCurrentValueContainer=u.domParent.querySelector("."+a.default.minCurrentValueContainer),u.maxCurrentValueContainer=u.domParent.querySelector("."+a.default.maxCurrentValueContainer),u.minCurrentValueInput=u.domParent.querySelector("."+a.default.minCurrentValueInput),u.maxCurrentValueInput=u.domParent.querySelector("."+a.default.maxCurrentValueInput)):(u.currentValueContainer=u.domParent.querySelector("."+a.default.currentValueContainer),u.currentValueInput=u.domParent.querySelector("."+a.default.currentValueInput)),u.valuesContainer=u.domParent.querySelector("."+a.default.valuesContainer),u.stepInput=u.domParent.querySelector("."+a.default.stepInput),u.rulerStepInput=u.domParent.querySelector("."+a.default.rulerStepInput),u.minRangeInput=u.domParent.querySelector("."+a.default.minRangeInput),u.maxRangeInput=u.domParent.querySelector("."+a.default.maxRangeInput),u.maxDecimalPlaceInput=u.domParent.querySelector("."+a.default.maxDecimalPlaceInput),u.thumbCheckbox=u.domParent.querySelector("."+a.default.thumbCheckbox),u.rulerCheckbox=u.domParent.querySelector("."+a.default.rulerCheckbox),u.diapasonCheckbox=u.domParent.querySelector("."+a.default.diapasonCheckbox),u.verticalCheckbox=u.domParent.querySelector("."+a.default.verticalCheckbox)},this._setListeners=function(){u.isRange?(u.minCurrentValueInput.addEventListener("input",u._debounceInput),u.maxCurrentValueInput.addEventListener("input",u._debounceInput)):u.currentValueInput.addEventListener("input",u._debounceInput),u.withFractional&&u.maxDecimalPlaceInput.addEventListener("input",u._debounceInput),u.stepInput.addEventListener("input",u._debounceInput),u.rulerStepInput.addEventListener("input",u._debounceInput),u.minRangeInput.addEventListener("input",u._debounceInput),u.maxRangeInput.addEventListener("input",u._debounceInput),u.thumbCheckbox.addEventListener("change",u._onCheckboxChange),u.rulerCheckbox.addEventListener("change",u._onCheckboxChange),u.diapasonCheckbox.addEventListener("change",u._onDiapasonChange),u.verticalCheckbox.addEventListener("change",u._onVerticalChange)},this._debounceInput=(n=function(){var e=r({},u.slider.getModelOptions()),t={min:+u.minRangeInput.value,max:+u.maxRangeInput.value};if(e.range=t,u.isRange){var n=+u.minCurrentValueInput.value,a=+u.maxCurrentValueInput.value;e.currentValues={min:n,max:a}}else e.currentValues={min:+u.currentValueInput.value};u.withFractional&&(e.maxDecimalPlace=+u.maxDecimalPlaceInput.value),e.step=+u.stepInput.value,e.rulerStep=+u.rulerStepInput.value,u.slider.updateOptions(e)},function(e){clearTimeout(l),l=setTimeout(n,500,e)}),this._onCheckboxChange=function(e){var t=e.target,n=t.getAttribute("data-value-name"),a=r({},u.slider.getModelOptions());a[n]=t.checked,u.slider.updateOptions(a)},this._onDiapasonChange=function(e){var t=r({},u.slider.getModelOptions()),n=e.target.checked,a=t.currentValues;if(u.isRange&&!n){var o={min:a.min};t.currentValues=o,u.isRange=!u.isRange,u._toggleValueInputs(o)}else if(!u.isRange&&n){var i=t.range;o={min:a.min,max:i.max},t.currentValues=o,u.isRange=!u.isRange,u._toggleValueInputs(o)}u.slider.updateOptions(t)},this._onVerticalChange=function(e){var t=r({},u.slider.getModelOptions()),n=e.target.checked;t.orientation=n?"vertical":"horizontal",u._toggleOrientation(),u.slider.updateOptions(t)},this._toggleOrientation=function(){var e=u.slider.getDomParent(),t=e.querySelector(".range-slider__wrap");e.classList.toggle("config-panel__slider_vertical"),t.classList.toggle("config-panel__slider_vertical")},this._toggleValueInputs=function(e){var t=a.default.currentValueContainer,n=a.default.maxCurrentValueContainer,r=a.default.maxCurrentValueInput,o=a.default.minCurrentValueContainer,i=a.default.minCurrentValueInput;u.isRange?(u.valuesContainer.removeChild(u.currentValueContainer),u.maxCurrentValueContainer=u._getInputValueContainer({containerClassName:n,labelText:"Текущее макс. значение:",valueInputClassName:r,currentValue:e.max}),u.maxCurrentValueInput=u.maxCurrentValueContainer.querySelector("."+r),u.minCurrentValueContainer=u._getInputValueContainer({containerClassName:o,labelText:"Текущее мин. значение:",valueInputClassName:i,currentValue:e.min}),u.minCurrentValueInput=u.minCurrentValueContainer.querySelector("."+i),u.valuesContainer.insertAdjacentElement("afterbegin",u.maxCurrentValueContainer),u.valuesContainer.insertAdjacentElement("afterbegin",u.minCurrentValueContainer)):(u.valuesContainer.removeChild(u.minCurrentValueContainer),u.valuesContainer.removeChild(u.maxCurrentValueContainer),u.currentValueContainer=u._getInputValueContainer({containerClassName:t,labelText:"Текущее значение:",valueInputClassName:r,currentValue:e.min}),u.currentValueInput=u.currentValueContainer.querySelector("."+r),u.valuesContainer.insertAdjacentElement("afterbegin",u.currentValueContainer))},this._getInputValueContainer=function(e){var t=e.containerClassName,n=e.labelText,r=e.valueInputClassName,o=e.currentValue,i=document.createElement("p");i.classList.add(a.default.valueContainer),i.classList.add(t);var l=document.createElement("label");l.classList.add(a.default.valueLabel),l.textContent=n;var s=document.createElement("input");return s.classList.add(r),s.type="number",s.value=""+o,s.addEventListener("input",u._debounceInput),l.appendChild(s),i.appendChild(l),i},this._onOptionsUpdate=function(){u.isRange=u._hasRange();var e=u.slider.getModelOptions(),t=e.currentValues,n=e.step,r=e.range,a=e.withRuler,o=e.withThumb,i=e.rulerStep;u.stepInput.value=""+n,u.rulerStepInput.value=""+i,u.minRangeInput.value=""+r.min,u.maxRangeInput.value=""+r.max,u.rulerCheckbox.checked=a,u.thumbCheckbox.checked=o,u.isRange?(u.minCurrentValueInput.value=""+t.min,u.maxCurrentValueInput.value=""+t.max):u.currentValueInput.value=""+t.min},this.slider=t,this.domParent=e,this.isRange=this._hasRange(),this.withFractional=this._hasFractional()};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={minCurrentValueContainer:"config-panel__value_current-min-value",maxCurrentValueContainer:"config-panel__value_current-max-value",minCurrentValueInput:"current-min-value",maxCurrentValueInput:"current-max-value",maxDecimalPlaceInput:"max-decimal-place",currentValueContainer:"config-panel__value_current-value",currentValueInput:"current-value",valuesContainer:"config-panel__values",valueContainer:"config-panel__value",valueLabel:"config-panel__label",stepInput:"step",rulerStepInput:"ruler-step",minRangeInput:"min-range-value",maxRangeInput:"max-range-value",thumbCheckbox:"thumb-show",rulerCheckbox:"ruler-show",diapasonCheckbox:"diapason",verticalCheckbox:"vertical"}},function(e,t,n){var r=n(5);e.exports=(r.default||r).template({1:function(e,t,n,r,a){var o,i=e.lambda,l=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'  <p class="config-panel__value config-panel__value_current-min-value">\n    <label class="config-panel__label">\n      Текущее мин. значение:\n      <input class="current-min-value" type="number" value="'+l(i(null!=(o=null!=t?u(t,"currentValues"):t)?u(o,"min"):o,t))+'">\n    </label>\n  </p>\n  <p class="config-panel__value config-panel__value_current-max-value">\n    <label class="config-panel__label">\n      Текущее макс. значение:\n      <input class="current-max-value" type="number" value="'+l(i(null!=(o=null!=t?u(t,"currentValues"):t)?u(o,"max"):o,t))+'">\n    </label>\n  </p>\n'},3:function(e,t,n,r,a){var o,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'  <p class="config-panel__value config-panel__value_current-value">\n    <label class="config-panel__label">\n      Текущее значение:\n      <input class="current-value" type="number" value="'+e.escapeExpression(e.lambda(null!=(o=null!=t?i(t,"currentValues"):t)?i(o,"min"):o,t))+'">\n    </label>\n  </p>\n'},5:function(e,t,n,r,a){var o,i=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'  <p class="config-panel__value">\n    <label class="config-panel__label">\n      Макс. знаков после запятой:\n      <input class="max-decimal-place" type="number" value="'+e.escapeExpression("function"==typeof(o=null!=(o=i(n,"maxDecimalPlace")||(null!=t?i(t,"maxDecimalPlace"):t))?o:e.hooks.helperMissing)?o.call(null!=t?t:e.nullContext||{},{name:"maxDecimalPlace",hash:{},data:a,loc:{start:{line:51,column:60},end:{line:51,column:79}}}):o)+'">\n    </label>\n  </p>\n'},7:function(e,t,n,r,a){return"checked"},compiler:[8,">= 4.3.0"],main:function(e,t,n,r,a){var o,i,l=null!=t?t:e.nullContext||{},u=e.hooks.helperMissing,s=e.escapeExpression,c=e.lambda,p=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<fieldset class="config-panel__values">\n'+(null!=(o=p(n,"if").call(l,null!=t?p(t,"isRange"):t,{name:"if",hash:{},fn:e.program(1,a,0),inverse:e.program(3,a,0),data:a,loc:{start:{line:2,column:2},end:{line:22,column:9}}}))?o:"")+'  <p class="config-panel__value">\n    <label class="config-panel__label">\n      Шаг:\n      <input class="step" type="number" value="'+s("function"==typeof(i=null!=(i=p(n,"step")||(null!=t?p(t,"step"):t))?i:u)?i.call(l,{name:"step",hash:{},data:a,loc:{start:{line:26,column:47},end:{line:26,column:55}}}):i)+'">\n    </label>\n  </p>\n  <p class="config-panel__value">\n    <label class="config-panel__label">\n      Шаг для шкалы:\n      <input class="ruler-step" type="number" value="'+s("function"==typeof(i=null!=(i=p(n,"rulerStep")||(null!=t?p(t,"rulerStep"):t))?i:u)?i.call(l,{name:"rulerStep",hash:{},data:a,loc:{start:{line:32,column:53},end:{line:32,column:66}}}):i)+'">\n    </label>\n  </p>\n  <p class="config-panel__value">\n    <label class="config-panel__label">\n      Мин. значение:\n      <input class="min-range-value" type="number" value='+s(c(null!=(o=null!=t?p(t,"range"):t)?p(o,"min"):o,t))+'>\n    </label>\n  </p>\n  <p class="config-panel__value">\n    <label class="config-panel__label">\n      Макс. значение:\n      <input class="max-range-value" type="number" value="'+s(c(null!=(o=null!=t?p(t,"range"):t)?p(o,"max"):o,t))+'">\n    </label>\n  </p>\n'+(null!=(o=p(n,"if").call(l,null!=t?p(t,"withFractional"):t,{name:"if",hash:{},fn:e.program(5,a,0),inverse:e.noop,data:a,loc:{start:{line:47,column:2},end:{line:54,column:9}}}))?o:"")+'</fieldset>\n<fieldset>\n  <p class="config-panel__value">\n    <label class="config-panel__label">\n      Показывать текущее значение:\n      <input class="thumb-show" data-value-name="withThumb" type="checkbox" '+(null!=(o=p(n,"if").call(l,null!=t?p(t,"withThumb"):t,{name:"if",hash:{},fn:e.program(7,a,0),inverse:e.noop,data:a,loc:{start:{line:60,column:76},end:{line:60,column:107}}}))?o:"")+'>\n    </label>\n  </p>\n  <p class="config-panel__value">\n    <label class="config-panel__label">\n      Шкала:\n      <input class="ruler-show" data-value-name="withRuler" type="checkbox" '+(null!=(o=p(n,"if").call(l,null!=t?p(t,"withRuler"):t,{name:"if",hash:{},fn:e.program(7,a,0),inverse:e.noop,data:a,loc:{start:{line:66,column:76},end:{line:66,column:107}}}))?o:"")+'>\n    </label>\n  </p>\n  <p class="config-panel__value">\n    <label class="config-panel__label">\n      Диапазон:\n      <input class="diapason" type="checkbox" '+(null!=(o=p(n,"if").call(l,null!=t?p(t,"isRange"):t,{name:"if",hash:{},fn:e.program(7,a,0),inverse:e.noop,data:a,loc:{start:{line:72,column:46},end:{line:72,column:75}}}))?o:"")+'>\n    </label>\n  </p>\n  <p class="config-panel__value">\n    <label class="config-panel__label">\n      Вертикальный слайдер:\n      <input class="vertical" type="checkbox" '+(null!=(o=p(n,"if").call(l,null!=t?p(t,"isVertical"):t,{name:"if",hash:{},fn:e.program(7,a,0),inverse:e.noop,data:a,loc:{start:{line:78,column:46},end:{line:78,column:78}}}))?o:"")+">\n    </label>\n  </p>\n</fieldset>"},useData:!0})},function(e,t,n){var r=n(46),a=n(47);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},function(e,t,n){"use strict";var r,a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],a=0;a<e.length;a++){var o=e[a],u=t.base?o[0]+t.base:o[0],s=n[u]||0,c="".concat(u," ").concat(s);n[u]=s+1;var p=l(c),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==p?(i[p].references++,i[p].updater(d)):i.push({identifier:c,updater:g(d,t),references:1}),r.push(c)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var c,p=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=p(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function g(e,t){var n,r,a;if(t.singleton){var o=h++;n=m||(m=s(t)),r=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=s(t),r=f.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=l(n[r]);i[a].references--}for(var o=u(e,t),s=0;s<n.length;s++){var c=l(n[s]);0===i[c].references&&(i[c].updater(),i.splice(c,1))}n=o}}}},function(e,t,n){(t=n(48)(!1)).push([e.i,"html{font-family:Arial, sans-serif;font-size:14px;color:#eee6e6;background:#121212}.container{padding:10px 20px}.page-wrap{display:flex;flex-wrap:wrap;justify-content:space-between;margin:0 -1em}.range-slider-overflow{overflow:hidden}.range-slider,.range-slider__wrap{position:relative;width:100%;height:100%}.range-slider_vertical .range-slider__bar{width:4.1px;height:100%}.range-slider_vertical .range-slider__toggle{top:-5px;left:-5px;width:auto;height:10%}.range-slider_vertical .range-slider__ruler{height:100%;top:-400px;left:-17px}.range-slider_vertical .range-slider__ruler li{top:-5px;left:-5px;width:auto;height:10%}.range-slider_vertical .range-slider__thumb{top:-4px;left:22px}.range-slider__bar{position:relative;height:4.1px;border:none;background-color:#6b6b6b}.range-slider__scale{position:absolute;top:0;left:0;z-index:1;width:100%;height:100%;background-color:#423388;transform-origin:0 0}.range-slider__ruler{position:relative;top:10px;padding:0;margin:0;list-style:none;color:#eee6e6}.range-slider__ruler li{position:absolute;top:-5px;left:-7px;z-index:4;width:10%;height:0;font-size:14px;cursor:pointer}.range-slider__toggle{position:absolute;top:-5px;left:-7px;z-index:4;width:10%;height:0}.range-slider__toggle_active{z-index:10}.range-slider__handle{box-sizing:border-box;position:absolute;z-index:1;display:block;width:14px;height:14px;font-size:0;background-color:#423388;border:none;border-radius:50%;cursor:pointer}.range-slider__thumb{position:absolute;top:-25px;left:-18px;z-index:0;min-width:41px;padding:2px 4px;color:#eee6e6;font-size:14px;text-align:center;background:#423388}.config-panel{width:400px;margin:1em 1em}.config-panel__slider{margin-bottom:50px}.config-panel__slider_vertical{height:400px}.config-panel__title{margin:0;margin-bottom:34px;font-size:24px;font-weight:normal}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var a=(i=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(u," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([a]).join("\n")}var i,l,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";n.r(t);n(50);$(document).ready((function(){const e=$(".js-default-slider").rangeSlider({currentValues:{min:15},step:1,rulerStep:2,range:{min:0,max:30},withRuler:!0,withThumb:!0}),t=$(".js-range-slider").rangeSlider({currentValues:{min:15,max:26},range:{min:10,max:30},withRuler:!0,withThumb:!0}),n=$(".js-step-slider").rangeSlider({currentValues:{min:10},range:{min:10,max:30},step:5,withRuler:!0,withThumb:!0}),r=$(".js-vertical-slider").rangeSlider({currentValues:{min:15},range:{min:10,max:30},withRuler:!0,withThumb:!0,orientation:"vertical"});$(".js-default-slider-config").configPanel(e),$(".js-range-slider-config").configPanel(t),$(".js-step-slider-config").configPanel(n),$(".js-vertical-slider-config").configPanel(r)}))},function(e,t,n){const r=n(51);r.keys().forEach(r)},function(e,t,n){var r={"./android-chrome-192x192.png":52,"./android-chrome-512x512.png":53,"./apple-touch-icon.png":54,"./browserconfig.xml":55,"./favicon-16x16.png":56,"./favicon-32x32.png":57,"./favicon.ico":58,"./mstile-144x144.png":59,"./mstile-150x150.png":60,"./mstile-310x150.png":61,"./mstile-310x310.png":62,"./mstile-70x70.png":63,"./site.webmanifest":64};function a(e){var t=o(e);return n(t)}function o(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id=51},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/android-chrome-192x192.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/android-chrome-512x512.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/apple-touch-icon.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/browserconfig.xml"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/favicon-16x16.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/favicon-32x32.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/favicon.ico"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/mstile-144x144.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/mstile-150x150.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/mstile-310x150.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/mstile-310x310.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/mstile-70x70.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicons/site.webmanifest"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,